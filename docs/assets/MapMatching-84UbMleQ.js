import{bI as Y,u as L,r as v,bJ as Z,w as ee,bt as te,aB as u,a as $,aa as U,ab as G,al as se,c as n,d as ae,o as ne,f as oe,g as re,j as l,i as _,m as S,af as ie,a8 as le,D as B,L as R,B as D,C as I,W,ag as ue,Q as ce,am as de,_ as pe}from"./index-D7fX3MvK.js";import{S as me}from"./SimpleForm-BunSpcJw.js";import{W as q}from"./Warning-Bh_dzi12.js";import{M as fe}from"./Markdown-CCEIFZxr.js";const ve=Y("runMapMatching",()=>{const{$gettext:N}=L(),d=v("arn:aws:states:ca-central-1:142023388927:stateMachine:quetzal-mapmatching-api"),e=v("quetzal-api-bucket"),o=v("");function p(){o.value=te()}const j=v(0),{error:x,running:h,errorMessage:g,startExecution:P,status:w,stopExecution:T}=Z(),k=v({SIGMA:4.02,BETA:3,POWER:2,DIFF:!0,ptMetrics:!0,keepTime:!0,exclusions:[]});function m(a){a.forEach(s=>k.value[s.key]=s.value)}ee(w,async a=>{a==="SUCCEEDED"&&(h.value=!0,await b(),await y(),h.value=!1,w.value="",$().changeNotification({text:N("PT network successfully Mapmatched. See results pages for more details."),autoClose:!1,color:"success"}))});async function b(){const a=U();a.$reset();const s=await u.readJson(e.value,o.value.concat("/links_final.geojson")),i=await u.readJson(e.value,o.value.concat("/nodes_final.geojson"));if(a.loadPTFiles([{path:"inputs/pt/links.geojson",content:s},{path:"inputs/pt/nodes.geojson",content:i}],"local"),k.value.ptMetrics){const c=G();c.$reset();const M=await u.readJson(e.value,o.value.concat("/road_links.geojson")),A=await u.readJson(e.value,o.value.concat("/road_nodes.geojson"));c.loadRoadFiles([{path:"inputs/road/links.geojson",content:M},{path:"inputs/road/nodes.geojson",content:A}])}}async function y(){let a=await u.listFiles(e.value,o.value);a=a.filter(i=>i.endsWith(".csv"));const s=[];for(const i of a){let c=i.split("/").slice(-1);c="microservices/"+c;const M=await u.readBytes(e.value,i);s.push({path:c,content:M})}s.length>0&&$().loadOtherFiles(s)}return{stateMachineArn:d,bucket:e,callID:o,status:w,running:h,error:x,errorMessage:g,parameters:k,timer:j,saveParams:m,setCallID:p,startExecution:P,stopExecution:T,getCSVs:y}}),he={class:"background"},ge=`
# Match PT network on road network
$E = \\frac{1}{2} \\times (\\frac{d_{proj}}{\\sigma} )^{P}$ 

$T = |d_{dijkstra} - d_{acf}^{*}|$ 

$P = E+T$ 

\\* $d_{acf} = 0$ if use difference is false 
 
*Hidden Markov Map Matching Through Noise and Sparseness* 

*Paul Newson and John Krumm 2009*
`,ke=se({__name:"MapMatching",setup(N){const{$gettext:d}=L(),e=ve(),o=G(),p=U(),j=n(()=>e.stateMachineArn),x=n(()=>o.rlinksIsEmpty),h=n(()=>p.linksIsEmpty),g=n(()=>e.running),P=n(()=>e.status),w=n(()=>e.error),T=n(()=>e.errorMessage),k=n(()=>e.timer),m=n(()=>e.callID),b=n(()=>e.bucket),y=n(()=>e.parameters),a=n(()=>Array.from(new Set(p.links.features.map(t=>t.properties.route_type)))),s=v([{key:"exclusions",label:"route_type exclusion",value:null,items:a.value,type:"select",multiple:!0,hint:"routes type to not mapmatch (ex subway are not on roads)"},{key:"SIGMA",label:"Sigma",value:null,type:"number",units:"meters",rules:["required"],hint:"emission probablity constant. the bigger it     is the further away a stops can be from roads."},{key:"BETA",label:"beta",value:null,type:"number",units:"meters",rules:["required"],hint:"transition probablity constant. The smaller the smaller      the difference between the as-the-crow and routing distance can be (if use difference is true)"},{key:"POWER",label:"power",value:null,type:"number",rules:["required"],hint:"Power used in the Emission Probability"},{key:"DIFF",label:"Use difference",value:null,type:"boolean",units:"bool",rules:["required"],hint:"If False, act_dist is ignore in the transition probability. This change the emission to only     consider the shortest path between nodes. "},{key:"ptMetrics",label:"Add indicators on road links",value:null,type:"boolean",units:"bool",hint:"Add PT metrics to road links (ex: number of trips & number of lines)"},{key:"keepTime",label:"keep time",value:!0,type:"boolean",units:"bool",hint:"if true. keep time and calculate speed. if false. keep speed and calcule time"}]);ae(()=>{y.value.exclusions=y.value.exclusions.filter(t=>a.value.includes(t)),s.value.forEach(t=>t.value=y.value[t.key])}),ne(()=>{e.saveParams(s.value)});const i=v();async function c(){var E;if(!await i.value.validate())return;const r=de();e.running=!0,e.setCallID(),M(),await A();const f=e.parameters,C={scenario_path_S3:m.value,launcher_arg:{training_folder:"/tmp",params:f},metadata:{user_email:(E=r.cognitoInfo)==null?void 0:E.email}};e.startExecution(j.value,C)}function M(){let r=p.tripList.length/6;function f(E,K=20,Q=[12,8,4,2,1]){let X=Math.floor(E/K),F=100,O=12;for(let V of Q){let J=Math.abs(X-V);J<F&&(F=J,O=V)}return O}const C=f(r,20,[12,8,4,2,1]);e.timer=r/C+20+20+10}async function A(){const t=[];t.push(u.putObject(b.value,m.value.concat("/road_links.geojson"),JSON.stringify(o.rlinks))),t.push(u.putObject(b.value,m.value.concat("/road_nodes.geojson"),JSON.stringify(o.rnodes))),t.push(u.putObject(b.value,m.value.concat("/links.geojson"),JSON.stringify(p.links))),t.push(u.putObject(b.value,m.value.concat("/nodes.geojson"),JSON.stringify(p.nodes)));try{await Promise.all(t)}catch(r){console.log("err"),$().changeAlert(r)}}function z(){e.stopExecution()}const H=n(()=>x.value||h.value);return(t,r)=>(re(),oe("section",he,[l(ce,{class:"card"},{default:_(()=>[l(fe,{source:ge}),l(q,{show:H.value,title:S(d)("need a road and a PT network"),type:"warning"},null,8,["show","title"]),l(q,{show:w.value,messages:T.value},null,8,["show","messages"]),l(ie),l(me,{ref_key:"formRef",ref:i,modelValue:s.value,"onUpdate:modelValue":r[1]||(r[1]=f=>s.value=f)},{default:_(()=>[l(le,null,{default:_(()=>[l(R,{variant:"outlined",color:"success",loading:g.value,disabled:g.value||x.value||h.value,onClick:c},{default:_(()=>[D(I(S(d)("Process")),1)]),_:1},8,["loading","disabled"]),B(l(R,{color:"grey",variant:"text",onClick:r[0]||(r[0]=f=>z())},{default:_(()=>[D(I(S(d)("Abort")),1)]),_:1},512),[[W,g.value&&P.value==="RUNNING"]]),B(l(ue,null,{default:_(()=>[D(" ~ "+I(k.value>0?Math.ceil(k.value/60):S(d)("less than 1"))+I(S(d)(" minutes remaining")),1)]),_:1},512),[[W,g.value]])]),_:1})]),_:1},8,["modelValue"])]),_:1})]))}}),Me=pe(ke,[["__scopeId","data-v-03440bd5"]]);export{Me as default};
