import{bG as G,u as A,r as d,bH as K,w as L,a as x,az as f,br as Z,bb as H,aa as Q,ac as X,c as n,d as Y,o as ee,f as te,g as ae,j as u,i as w,k as I,a9 as se,ai as ne,a8 as oe,K as R,B as V,C as F,D as re,E as ue,Q as ie,am as le,aD as ce,_ as pe}from"./index--m8YSJTS.js";import{W as M,S as de}from"./SimpleForm-CRGFhE5g.js";import{M as fe}from"./Markdown-BJjR5raY.js";const he=G("runTransit",()=>{const{$gettext:C}=A(),i=d("arn:aws:states:ca-central-1:142023388927:stateMachine:quetzal-transit-api"),h=d("quetzal-api-bucket"),t=d("");function v(){t.value=Z()}const S=d(0),{error:E,running:_,errorMessage:b,startExecution:j,status:k,stopExecution:D}=K(i.value),l=d({catchment_radius:{},footpaths:{max_length:1e3,speed:3,n_ntlegs:2}});function m(c){c.footpaths.forEach(s=>l.value.footpaths[s.key]=s.value),c.catchment_radius.forEach(s=>l.value.catchment_radius[s.key]=s.value)}L(k,async c=>{c==="SUCCEEDED"&&(_.value=!0,await g(),_.value=!1,k.value="",x().changeNotification({text:C("Success. See results pages for more details."),autoClose:!1,color:"success"}))});async function g(){let c=await f.listFiles(h.value,`${t.value}/outputs/`);const s=[];for(const p of c){let o=p.split("/").slice(-1);o="microservices/"+o;let y=null;o.endsWith(".geojson")||o.endsWith(".json")?y=await f.readJson(h.value,p):y=await f.readBytes(h.value,p),s.push({path:o,content:y})}s.length>0&&x().loadOtherFiles(s)}return{stateMachineArn:i,bucket:h,callID:t,status:k,running:_,error:E,errorMessage:b,parameters:l,timer:S,saveParams:m,setCallID:v,startExecution:j,stopExecution:D}}),ve={class:"background"},me=`
# Transit Analysis
## inputs
* **PT network**
* **inputs/population.geojson** (optional) with **density** in $\\frac{people}{km^2}$.

* **road network** (optional)
* od/od.geojson (optional) 
## outputs
* metrics (.csv) per **route_id** and **route_type**. 

* the path used by each OD (*If OD are provided*).
* catchemnt radius on each PT nodes
`,ge=H({__name:"Transit",setup(C){const{$gettext:i}=A(),h=x(),t=he(),v=Q(),S=X(),E=n(()=>v.linksIsEmpty),_=n(()=>S.layerIsEmpty),b=n(()=>t.running),j=n(()=>t.status),k=n(()=>t.error),D=n(()=>t.errorMessage),l=n(()=>t.callID),m=n(()=>t.bucket),g=n(()=>t.parameters),c=n(()=>h.otherFiles.filter(e=>e.path==="inputs/population.geojson")[0]),s=n(()=>E.value),p=d([{key:"max_length",label:i("Footpaths max length"),value:null,disabled:!1,type:"number",units:"metres",hint:"as the crow flight walking speed",rules:["required","nonNegative"]},{key:"speed",label:i("Footpaths speed"),value:null,disabled:!1,units:"km/h",type:"number",hint:"max length for a footpath (walk distance between stations)",rules:["required","largerThanZero"]},{key:"n_ntlegs",label:i("Footpaths number of connection"),value:null,disabled:!1,type:"number",hint:"number of connection between the origin (or destination) and the footpaths",rules:["required","largerThanZero"]}]),o=d([]),y=n(()=>[...o.value,...p.value]);function $(e){return{key:e,label:`${e} catchment Radius`,value:500,type:"number",units:"metres",hint:"vehicle type catchment radius",rules:["required","nonNegative"]}}const O=n(()=>Array.from(new Set(v.links.features.map(e=>e.properties.route_type))));function q(){O.value.forEach(a=>o.value.push($(a)));const e=new Set(Object.keys(g.value.catchment_radius));o.value.forEach(a=>{e.has(a.key)&&(a.value=g.value.catchment_radius[a.key])});const r=new Set(O.value);e.forEach(a=>{r.has(a)||delete g.value.catchment_radius[a]})}function B(){p.value.forEach(e=>e.value=g.value.footpaths[e.key])}Y(()=>{B(),q()}),ee(()=>{T()});function T(){t.saveParams({footpaths:p.value,catchment_radius:o.value})}const N=d();async function J(){var P;if(!await N.value.validate())return;T();const r=le();t.running=!0,t.setCallID(),await U();const a=ce(t.parameters),z={scenario_path_S3:l.value,launcher_arg:{training_folder:"/tmp",params:a},metadata:{user_email:(P=r.cognitoInfo)==null?void 0:P.email}};t.startExecution(z)}async function U(){const e=[];try{e.push(f.putObject(m.value,l.value.concat("/inputs/pt/links.geojson"),JSON.stringify(v.links))),e.push(f.putObject(m.value,l.value.concat("/inputs/pt/nodes.geojson"),JSON.stringify(v.nodes))),_.value||e.push(f.putObject(m.value,l.value.concat("/inputs/od/od.geojson"),JSON.stringify(S.layer))),c.value&&e.push(f.putObject(m.value,l.value.concat("/inputs/population.geojson"),JSON.stringify(c.value.content))),await Promise.all(e)}catch(r){x().changeAlert(r),t.running=!1}}function W(){t.stopExecution()}return(e,r)=>(te(),ae("section",ve,[u(ie,{class:"card"},{default:w(()=>[u(fe,{source:me}),u(M,{show:s.value,title:I(i)("need PT network"),type:"warning"},null,8,["show","title"]),u(M,{show:k.value,messages:D.value},null,8,["show","messages"]),u(se),u(ne),u(de,{ref_key:"formRef",ref:N,modelValue:y.value,"onUpdate:modelValue":r[1]||(r[1]=a=>y.value=a)},{default:w(()=>[u(oe,null,{default:w(()=>[u(R,{variant:"outlined",color:"success",loading:b.value,disabled:b.value||s.value,onClick:J},{default:w(()=>[V(F(I(i)("Process")),1)]),_:1},8,["loading","disabled"]),re(u(R,{color:"grey",variant:"text",onClick:r[0]||(r[0]=a=>W())},{default:w(()=>[V(F(I(i)("Abort")),1)]),_:1},512),[[ue,b.value&&j.value==="RUNNING"]])]),_:1})]),_:1},8,["modelValue"])]),_:1})]))}}),ke=pe(ge,[["__scopeId","data-v-10a3c166"]]);export{ke as default};
