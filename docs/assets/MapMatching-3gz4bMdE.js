import{an as G,u as K,c1 as H,ac as Q,ab as z,c as a,r as j,d as X,o as Y,f as Z,g as ee,j as n,i,m as d,ah as te,a9 as ae,D as N,L as V,B as _,C as v,W as A,ai as se,Q as ne,ao as re,aE as h,a as oe,_ as ie}from"./index-B3varY1O.js";import{S as le}from"./SimpleForm-4N7MpWjJ.js";import{W as C}from"./Warning-Bfqr-wGj.js";import{M as ue}from"./Markdown-C9eTgt1N.js";import"./form-B2uRhppC.js";const ce={class:"background"},de=`
# Match PT network on road network
$Probability = Emission + Transmission$ , or
 
$Probability = \\frac{1}{2} (\\frac{d_{proj}}{\\sigma} )^{power} + \\frac{1}{\\beta} |d_{dijkstra} - d_{acf}^{*}|$ 
 
\\* $d_{acf} = 0$ if use difference is false 
 

*Hidden Markov Map Matching Through Noise and Sparseness* 

*Paul Newson and John Krumm 2009*
`,me=G({__name:"MapMatching",setup(pe){const{$gettext:r}=K(),e=H(),b=Q(),l=z(),k=a(()=>b.rlinksIsEmpty),w=a(()=>l.linksIsEmpty),m=a(()=>e.running),O=a(()=>e.status),D=a(()=>e.error),$=a(()=>e.errorMessage),M=a(()=>e.timer),u=a(()=>e.callID),p=a(()=>e.bucket),g=a(()=>e.parameters),S=a(()=>Array.from(new Set(l.links.features.map(t=>t.properties.route_type)))),c=j([{key:"exclusions",label:r("route_type exclusion"),value:null,items:S.value,type:"select",multiple:!0,hint:"routes type to not mapmatch (ex subway are not on roads)"},{key:"SIGMA",label:"Sigma",value:null,advanced:!0,type:"number",units:"meters",rules:["required"],hint:"emission probablity constant. the bigger it     is the further away a stops can be from roads."},{key:"BETA",label:"beta",value:null,advanced:!0,type:"number",units:"meters",rules:["required"],hint:"transition probablity constant. The smaller the smaller      the difference between the as-the-crow and routing distance can be (if use difference is true)"},{key:"POWER",label:"power",value:null,advanced:!0,type:"number",rules:["required"],hint:"Power used in the Emission Probability"},{key:"DIFF",label:r("Use difference"),value:null,advanced:!0,type:"boolean",units:"bool",rules:["required"],hint:"If False, act_dist is ignore in the transition probability. This change the emission to only     consider the shortest path between nodes. "},{key:"ptMetrics",label:r("Add indicators on road links"),value:null,type:"boolean",units:"bool",hint:"Add PT metrics to road links (ex: number of trips & number of lines)"},{key:"keepTime",label:r("Keep PT time and calculate new PT speed"),value:!0,type:"boolean",units:"bool",hint:"if true. keep time and calculate speed. if false. keep speed and calcule time"}]);X(()=>{g.value.exclusions=g.value.exclusions.filter(t=>S.value.includes(t)),c.value.forEach(t=>t.value=g.value[t.key])}),Y(()=>{e.saveParams(c.value)});const x=j();async function B(){var f;if(!await x.value.validate())return;const s=re();e.saveParams(c.value),e.running=!0,e.setCallID(),F(),await J();const o=e.parameters,y={scenario_path_S3:u.value,launcher_arg:{training_folder:"/tmp",params:o},metadata:{user_email:(f=s.cognitoInfo)==null?void 0:f.email}};e.start(y)}function F(){let s=l.tripList.length/6;function o(f,U=20,W=[12,8,4,2,1]){let q=Math.floor(f/U),P=100,T=12;for(let I of W){let E=Math.abs(q-I);E<P&&(P=E,T=I)}return T}const y=o(s,20,[12,8,4,2,1]);e.timer=s/y+20+20+10}async function J(){const t=[];t.push(h.putObject(p.value,u.value.concat("/road_links.geojson"),JSON.stringify(b.rlinks))),t.push(h.putObject(p.value,u.value.concat("/road_nodes.geojson"),JSON.stringify(b.rnodes))),t.push(h.putObject(p.value,u.value.concat("/links.geojson"),JSON.stringify(l.links))),t.push(h.putObject(p.value,u.value.concat("/nodes.geojson"),JSON.stringify(l.nodes)));try{await Promise.all(t)}catch(s){console.log("err"),oe().changeAlert(s)}}function L(){e.stopExecution()}const R=a(()=>k.value||w.value);return(t,s)=>(ee(),Z("section",ce,[n(ne,{class:"card"},{default:i(()=>[n(ue,{source:de}),n(C,{show:R.value,title:d(r)("need a road and a PT network"),type:"warning"},null,8,["show","title"]),n(C,{show:D.value,messages:$.value},null,8,["show","messages"]),n(te),n(le,{ref_key:"formRef",ref:x,modelValue:c.value,"onUpdate:modelValue":s[1]||(s[1]=o=>c.value=o)},{default:i(()=>[n(ae,null,{default:i(()=>[n(V,{variant:"outlined",color:"success",loading:m.value,disabled:m.value||k.value||w.value,onClick:B},{default:i(()=>[_(v(d(r)("Process")),1)]),_:1},8,["loading","disabled"]),N(n(V,{color:"grey",variant:"text",onClick:s[0]||(s[0]=o=>L())},{default:i(()=>[_(v(d(r)("Abort")),1)]),_:1},512),[[A,m.value&&O.value==="RUNNING"]]),N(n(se,null,{default:i(()=>[_(" ~ "+v(M.value>0?Math.ceil(M.value/60):d(r)("less than 1"))+v(d(r)(" minutes remaining")),1)]),_:1},512),[[A,m.value]])]),_:1})]),_:1},8,["modelValue"])]),_:1})]))}}),ye=ie(me,[["__scopeId","data-v-7c454f43"]]);export{ye as default};
