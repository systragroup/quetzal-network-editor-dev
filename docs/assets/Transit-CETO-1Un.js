import{bG as Z,u as $,r as p,bH as H,w as Q,a as x,az as f,br as X,bb as Y,aa as ee,ac as te,c as r,d as ae,o as se,f as ne,g as oe,j as i,i as b,k as I,a9 as re,ai as ue,a8 as le,K as F,B as M,C as q,D as ie,E as ce,Q as pe,am as z,aD as de,_ as he}from"./index-BH1OIb0u.js";import{W as A,S as fe}from"./SimpleForm-zzjtVGNP.js";import{M as ve}from"./Markdown-DZHcDtGD.js";const me=Z("runTransit",()=>{const{$gettext:C}=$(),u=p("arn:aws:states:ca-central-1:142023388927:stateMachine:quetzal-transit-api"),m=p("quetzal-api-bucket"),t=p("");function g(){t.value=X()}const S=p(0),{error:E,running:_,errorMessage:k,startExecution:j,status:w,stopExecution:D}=H(u.value),l=p({general:{step_size:.001,use_road_network:!1},catchment_radius:{},footpaths:{max_length:1e3,speed:3,n_ntlegs:2}});function y(o){o.general.forEach(a=>l.value.general[a.key]=a.value),o.footpaths.forEach(a=>l.value.footpaths[a.key]=a.value),o.catchment_radius.forEach(a=>l.value.catchment_radius[a.key]=a.value)}Q(w,async o=>{o==="SUCCEEDED"&&(_.value=!0,await v(),_.value=!1,w.value="",x().changeNotification({text:C("Success. See results pages for more details."),autoClose:!1,color:"success"}))});async function v(){let o=await f.listFiles(m.value,`${t.value}/outputs/`);const a=[];for(const d of o){let c=d.split("/").slice(-1);c="microservices/"+c;let h=null;c.endsWith(".geojson")||c.endsWith(".json")?h=await f.readJson(m.value,d):h=await f.readBytes(m.value,d),a.push({path:c,content:h})}a.length>0&&x().loadOtherFiles(a)}return{stateMachineArn:u,bucket:m,callID:t,status:w,running:_,error:E,errorMessage:k,parameters:l,timer:S,saveParams:y,setCallID:g,startExecution:j,stopExecution:D}}),ge={class:"background"},ye=`
# Transit Analysis
## inputs
* **PT network**
* **inputs/population.geojson** (optional) with **density** in $\\frac{people}{km^2}$.

* **road network** (optional)
* od/od.geojson (optional) 
## outputs
* metrics (.csv) per **route_id** and **route_type**. 

* the path used by each OD (*If OD are provided*).
* catchemnt radius on each PT nodes
`,_e=Y({__name:"Transit",setup(C){const{$gettext:u}=$(),m=x(),t=me(),g=ee(),S=te(),E=r(()=>g.linksIsEmpty),_=r(()=>S.layerIsEmpty),k=r(()=>t.running),j=r(()=>t.status),w=r(()=>t.error),D=r(()=>t.errorMessage),l=r(()=>t.callID),y=r(()=>t.bucket),v=r(()=>t.parameters),o=r(()=>m.otherFiles.filter(e=>e.path==="inputs/population.geojson")[0]),a=r(()=>E.value),d=p([{key:"step_size",label:u("Population mesh size (0.001 ~100m)"),value:null,type:"number",units:"degree",hint:"Population is created from zones as a mesh of point with this distance",rules:["required","nonNegative"]},{key:"use_road_network",label:u("use road network"),value:null,type:"boolean",hint:"Use road network nodes to compute population mesh (population is distributed on road nodes.)",rules:["required","nonNegative"]}]),c=p([{key:"max_length",label:u("Footpaths max length"),value:null,type:"number",units:"metres",hint:"as the crow flight walking speed",rules:["required","nonNegative"]},{key:"speed",label:u("Footpaths speed"),value:null,units:"km/h",type:"number",hint:"max length for a footpath (walk distance between stations)",rules:["required","largerThanZero"]},{key:"n_ntlegs",label:u("Footpaths number of connection"),value:null,type:"number",hint:"number of connection between the origin (or destination) and the footpaths",rules:["required","largerThanZero"]}]),h=p([]),N=r(()=>[...d.value,...h.value,...c.value]);function B(e){return{key:e,label:`${e} catchment Radius`,value:500,type:"number",units:"metres",hint:"vehicle type catchment radius",rules:["required","nonNegative"]}}const O=r(()=>Array.from(new Set(g.links.features.map(e=>e.properties.route_type))));function J(){O.value.forEach(s=>h.value.push(B(s)));const e=new Set(Object.keys(v.value.catchment_radius));h.value.forEach(s=>{e.has(s.key)&&(s.value=v.value.catchment_radius[s.key])});const n=new Set(O.value);e.forEach(s=>{n.has(s)||delete v.value.catchment_radius[s]})}function U(){d.value.forEach(e=>e.value=v.value.general[e.key])}function G(){c.value.forEach(e=>e.value=v.value.footpaths[e.key])}ae(()=>{U(),G(),J()}),se(()=>{T()});function T(){t.saveParams({general:d.value,footpaths:c.value,catchment_radius:h.value})}const P=p();async function W(){var V;if(!await P.value.validate())return;T();const n=z();t.running=!0,t.setCallID(),await K();const s=de(t.parameters),R={scenario_path_S3:l.value,launcher_arg:{training_folder:"/tmp",params:s},metadata:{user_email:(V=n.cognitoInfo)==null?void 0:V.email}};t.startExecution(R)}async function K(){const e=z(),n=[];try{n.push(f.putObject(y.value,l.value.concat("/inputs/pt/links.geojson"),JSON.stringify(g.links))),n.push(f.putObject(y.value,l.value.concat("/inputs/pt/nodes.geojson"),JSON.stringify(g.nodes))),_.value||n.push(f.putObject(y.value,l.value.concat("/inputs/od/od.geojson"),JSON.stringify(S.layer))),o.value&&(o.value.content==null&&e.model!==null&&(o.value.content=await f.readJson(e.model,e.scenario+"/"+o.value.path)),n.push(f.putObject(y.value,l.value.concat("/inputs/population.geojson"),JSON.stringify(o.value.content)))),await Promise.all(n)}catch(s){x().changeAlert(s),t.running=!1}}function L(){t.stopExecution()}return(e,n)=>(ne(),oe("section",ge,[i(pe,{class:"card"},{default:b(()=>[i(ve,{source:ye}),i(A,{show:a.value,title:I(u)("need PT network"),type:"warning"},null,8,["show","title"]),i(A,{show:w.value,messages:D.value},null,8,["show","messages"]),i(re),i(ue),i(fe,{ref_key:"formRef",ref:P,modelValue:N.value,"onUpdate:modelValue":n[1]||(n[1]=s=>N.value=s)},{default:b(()=>[i(le,null,{default:b(()=>[i(F,{variant:"outlined",color:"success",loading:k.value,disabled:k.value||a.value,onClick:W},{default:b(()=>[M(q(I(u)("Process")),1)]),_:1},8,["loading","disabled"]),ie(i(F,{color:"grey",variant:"text",onClick:n[0]||(n[0]=s=>L())},{default:b(()=>[M(q(I(u)("Abort")),1)]),_:1},512),[[ce,k.value&&j.value==="RUNNING"]])]),_:1})]),_:1},8,["modelValue"])]),_:1})]))}}),Se=he(_e,[["__scopeId","data-v-daea4f3f"]]);export{Se as default};
