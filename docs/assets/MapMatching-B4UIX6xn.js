import{bG as X,u as W,r as h,bH as Y,w as Z,a as $,aa as G,az as l,ab as L,br as ee,bb as te,c as n,d as se,o as ae,f as ne,g as oe,j as i,i as k,k as M,ai as re,a8 as ie,K as B,B as D,C as I,D as R,E as q,aj as le,Q as ue,am as ce,_ as de}from"./index-Ct1ErY8A.js";import{W as U,S as pe}from"./SimpleForm-BBU3Ccsw.js";import{M as fe}from"./Markdown-DGcZX8Fx.js";const me=X("runMapMatching",()=>{const{$gettext:N}=W(),d=h("arn:aws:states:ca-central-1:142023388927:stateMachine:quetzal-mapmatching-api"),e=h("quetzal-api-bucket"),o=h("");function m(){o.value=ee()}const S=h(0),{error:x,running:p,errorMessage:P,startExecution:T,status:b,stopExecution:E}=Y(d.value),u=h({SIGMA:4.02,BETA:3,POWER:2,DIFF:!0,ptMetrics:!0,keepTime:!0,exclusions:[]});function g(t){t.forEach(a=>u.value[a.key]=a.value)}Z(b,async t=>{t==="SUCCEEDED"&&(p.value=!0,await y(),await _(),p.value=!1,b.value="",$().changeNotification({text:N("PT network successfully Mapmatched. See results pages for more details."),autoClose:!1,color:"success"}))});async function y(){const t=G();t.$reset();const a=await l.readJson(e.value,o.value.concat("/links_final.geojson")),c=await l.readJson(e.value,o.value.concat("/nodes_final.geojson"));if(t.loadPTFiles([{path:"inputs/pt/links.geojson",content:a},{path:"inputs/pt/nodes.geojson",content:c}],"local"),u.value.ptMetrics){const f=L();f.$reset();const w=await l.readJson(e.value,o.value.concat("/road_links.geojson")),A=await l.readJson(e.value,o.value.concat("/road_nodes.geojson"));f.loadRoadFiles([{path:"inputs/road/links.geojson",content:w},{path:"inputs/road/nodes.geojson",content:A}])}}async function _(){let t=await l.listFiles(e.value,o.value);t=t.filter(c=>c.endsWith(".csv"));const a=[];for(const c of t){let f=c.split("/").slice(-1);f="microservices/"+f;const w=await l.readBytes(e.value,c);a.push({path:f,content:w})}a.length>0&&$().loadOtherFiles(a)}return{stateMachineArn:d,bucket:e,callID:o,status:b,running:p,error:x,errorMessage:P,parameters:u,timer:S,saveParams:g,setCallID:m,startExecution:T,stopExecution:E,getCSVs:_}}),ve={class:"background"},he=`
# Match PT network on road network
$E = \\frac{1}{2} \\times (\\frac{d_{proj}}{\\sigma} )^{P}$ 

$T = |d_{dijkstra} - d_{acf}^{*}|$ 

$P = E+T$ 

\\* $d_{acf} = 0$ if use difference is false 
 
*Hidden Markov Map Matching Through Noise and Sparseness* 

*Paul Newson and John Krumm 2009*
`,ge=te({__name:"MapMatching",setup(N){const{$gettext:d}=W(),e=me(),o=L(),m=G(),S=n(()=>o.rlinksIsEmpty),x=n(()=>m.linksIsEmpty),p=n(()=>e.running),P=n(()=>e.status),T=n(()=>e.error),b=n(()=>e.errorMessage),E=n(()=>e.timer),u=n(()=>e.callID),g=n(()=>e.bucket),y=n(()=>e.parameters),_=n(()=>Array.from(new Set(m.links.features.map(s=>s.properties.route_type)))),t=h([{key:"exclusions",label:"route_type exclusion",value:null,items:_.value,type:"select",multiple:!0,hint:"routes type to not mapmatch (ex subway are not on roads)"},{key:"SIGMA",label:"Sigma",value:null,type:"number",units:"meters",rules:["required"],hint:"emission probablity constant. the bigger it     is the further away a stops can be from roads."},{key:"BETA",label:"beta",value:null,type:"number",units:"meters",rules:["required"],hint:"transition probablity constant. The smaller the smaller      the difference between the as-the-crow and routing distance can be (if use difference is true)"},{key:"POWER",label:"power",value:null,type:"number",rules:["required"],hint:"Power used in the Emission Probability"},{key:"DIFF",label:"Use difference",value:null,type:"boolean",units:"bool",rules:["required"],hint:"If False, act_dist is ignore in the transition probability. This change the emission to only     consider the shortest path between nodes. "},{key:"ptMetrics",label:"Add indicators on road links",value:null,type:"boolean",units:"bool",hint:"Add PT metrics to road links (ex: number of trips & number of lines)"},{key:"keepTime",label:"keep time",value:!0,type:"boolean",units:"bool",hint:"if true. keep time and calculate speed. if false. keep speed and calcule time"}]);se(()=>{y.value.exclusions=y.value.exclusions.filter(s=>_.value.includes(s)),t.value.forEach(s=>s.value=y.value[s.key])}),ae(()=>{e.saveParams(t.value)});const a=h();async function c(){var j;if(!await a.value.validate())return;const r=ce();e.running=!0,e.setCallID(),f(),await w();const v=e.parameters,C={scenario_path_S3:u.value,launcher_arg:{training_folder:"/tmp",params:v},metadata:{user_email:(j=r.cognitoInfo)==null?void 0:j.email}};e.startExecution(C)}function f(){let r=m.tripList.length/6;function v(j,H=20,K=[12,8,4,2,1]){let Q=Math.floor(j/H),F=100,O=12;for(let V of K){let J=Math.abs(Q-V);J<F&&(F=J,O=V)}return O}const C=v(r,20,[12,8,4,2,1]);e.timer=r/C+20+20+10}async function w(){const s=[];s.push(l.putObject(g.value,u.value.concat("/road_links.geojson"),JSON.stringify(o.rlinks))),s.push(l.putObject(g.value,u.value.concat("/road_nodes.geojson"),JSON.stringify(o.rnodes))),s.push(l.putObject(g.value,u.value.concat("/links.geojson"),JSON.stringify(m.links))),s.push(l.putObject(g.value,u.value.concat("/nodes.geojson"),JSON.stringify(m.nodes)));try{await Promise.all(s)}catch(r){console.log("err"),$().changeAlert(r)}}function A(){e.stopExecution()}const z=n(()=>S.value||x.value);return(s,r)=>(ne(),oe("section",ve,[i(ue,{class:"card"},{default:k(()=>[i(fe,{source:he}),i(U,{show:z.value,title:M(d)("need a road and a PT network"),type:"warning"},null,8,["show","title"]),i(U,{show:T.value,messages:b.value},null,8,["show","messages"]),i(re),i(pe,{ref_key:"formRef",ref:a,modelValue:t.value,"onUpdate:modelValue":r[1]||(r[1]=v=>t.value=v)},{default:k(()=>[i(ie,null,{default:k(()=>[i(B,{variant:"outlined",color:"success",loading:p.value,disabled:p.value||S.value||x.value,onClick:c},{default:k(()=>[D(I(M(d)("Process")),1)]),_:1},8,["loading","disabled"]),R(i(B,{color:"grey",variant:"text",onClick:r[0]||(r[0]=v=>A())},{default:k(()=>[D(I(M(d)("Abort")),1)]),_:1},512),[[q,p.value&&P.value==="RUNNING"]]),R(i(le,null,{default:k(()=>[D(" ~ "+I(E.value>0?Math.ceil(E.value/60):M(d)("less than 1"))+I(M(d)(" minutes remaining")),1)]),_:1},512),[[q,p.value]])]),_:1})]),_:1},8,["modelValue"])]),_:1})]))}}),_e=de(ge,[["__scopeId","data-v-c75483a1"]]);export{_e as default};
