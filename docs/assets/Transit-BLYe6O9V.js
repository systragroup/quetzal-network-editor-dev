import{al as K,u as Z,a as I,bU as Q,aa as H,ac as X,c as s,r as v,d as Y,o as ee,f as te,g as ae,j as o,i as c,m as k,a9 as ne,af as se,a8 as oe,D as re,L as O,B as T,C,W as ue,Q as ie,am as D,aJ as le,aC as p,_ as ce}from"./index-JvMGzoLv.js";import{S as pe}from"./SimpleForm-BLFe2S9e.js";import{W as P}from"./Warning-DBCy96uK.js";import{M as de}from"./Markdown-CrAqvwoQ.js";import"./form-B2uRhppC.js";const me={class:"background"},he=`
# Transit Analysis
## inputs
* **PT network**
* **inputs/population.geojson** (optional) with **density** in $\\frac{people}{km^2}$.

* **road network** (optional)
* od/od.geojson (optional) 
## outputs
* metrics (.csv) per **route_id** and **route_type**. 

* the path used by each OD (*If OD are provided*).
* catchemnt radius on each PT nodes
`,ve=K({__name:"Transit",setup(fe){const{$gettext:r}=Z(),V=I(),t=Q(),d=H(),_=X(),R=s(()=>d.linksIsEmpty),M=s(()=>_.layerIsEmpty),A=s(()=>t.stateMachineArn),f=s(()=>t.running),F=s(()=>t.status),q=s(()=>t.error),J=s(()=>t.errorMessage),u=s(()=>t.callID),m=s(()=>t.bucket),i=s(()=>t.parameters),l=s(()=>V.otherFiles.filter(e=>e.path==="inputs/population.geojson")[0]),b=s(()=>R.value),g=v([{key:"step_size",label:r("Population mesh size (0.001 ~100m)"),value:null,type:"number",units:"degree",hint:"Population is created from zones as a mesh of point with this distance",rules:["required","nonNegative"]},{key:"use_road_network",label:r("use road network"),value:null,type:"boolean",hint:"Use road network nodes to compute population mesh (population is distributed on road nodes.)",rules:["required","nonNegative"]}]),y=v([{key:"max_length",label:r("Footpaths max length"),value:null,type:"number",units:"metres",hint:"as the crow flight walking speed",rules:["required","nonNegative"]},{key:"speed",label:r("Footpaths speed"),value:null,units:"km/h",type:"number",hint:"max length for a footpath (walk distance between stations)",rules:["required","largerThanZero"]},{key:"n_ntlegs",label:r("Footpaths number of connection"),value:null,type:"number",hint:"number of connection between the origin (or destination) and the footpaths",rules:["required","largerThanZero"]}]),h=v([]),w=s(()=>[...g.value,...h.value,...y.value]);function U(e){return{key:e,label:`${e} catchment Radius`,value:500,type:"number",units:"metres",hint:"vehicle type catchment radius",rules:["required","nonNegative"]}}const S=s(()=>Array.from(new Set(d.links.features.map(e=>e.properties.route_type))));function B(){S.value.forEach(a=>h.value.push(U(a)));const e=new Set(Object.keys(i.value.catchment_radius));h.value.forEach(a=>{e.has(a.key)&&(a.value=i.value.catchment_radius[a.key])});const n=new Set(S.value);e.forEach(a=>{n.has(a)||delete i.value.catchment_radius[a]})}function $(){g.value.forEach(e=>e.value=i.value.general[e.key])}function z(){y.value.forEach(e=>e.value=i.value.footpaths[e.key])}Y(()=>{$(),z(),B()}),ee(()=>{x()});function x(){t.saveParams({general:g.value,footpaths:y.value,catchment_radius:h.value})}const j=v();async function G(){var E;if(!await j.value.validate())return;x();const n=D();t.running=!0,t.setCallID(),await L();const a=le(t.parameters),N={scenario_path_S3:u.value,launcher_arg:{training_folder:"/tmp",params:a},metadata:{user_email:(E=n.cognitoInfo)==null?void 0:E.email}};t.startExecution(A.value,N)}async function L(){const e=D(),n=[];try{n.push(p.putObject(m.value,u.value.concat("/inputs/pt/links.geojson"),JSON.stringify(d.links))),n.push(p.putObject(m.value,u.value.concat("/inputs/pt/nodes.geojson"),JSON.stringify(d.nodes))),M.value||n.push(p.putObject(m.value,u.value.concat("/inputs/od/od.geojson"),JSON.stringify(_.layer))),l.value&&(l.value.content==null&&e.model!==null&&(l.value.content=await p.readJson(e.model,e.scenario+"/"+l.value.path)),n.push(p.putObject(m.value,u.value.concat("/inputs/population.geojson"),JSON.stringify(l.value.content)))),await Promise.all(n)}catch(a){I().changeAlert(a),t.running=!1}}function W(){t.stopExecution()}return(e,n)=>(ae(),te("section",me,[o(ie,{class:"card"},{default:c(()=>[o(de,{source:he}),o(P,{show:b.value,title:k(r)("need PT network"),type:"warning"},null,8,["show","title"]),o(P,{show:q.value,messages:J.value},null,8,["show","messages"]),o(ne),o(se),o(pe,{ref_key:"formRef",ref:j,modelValue:w.value,"onUpdate:modelValue":n[1]||(n[1]=a=>w.value=a)},{default:c(()=>[o(oe,null,{default:c(()=>[o(O,{variant:"outlined",color:"success",loading:f.value,disabled:f.value||b.value,onClick:G},{default:c(()=>[T(C(k(r)("Process")),1)]),_:1},8,["loading","disabled"]),re(o(O,{color:"grey",variant:"text",onClick:n[0]||(n[0]=a=>W())},{default:c(()=>[T(C(k(r)("Abort")),1)]),_:1},512),[[ue,f.value&&F.value==="RUNNING"]])]),_:1})]),_:1},8,["modelValue"])]),_:1})]))}}),we=ce(ve,[["__scopeId","data-v-71e7239f"]]);export{we as default};
