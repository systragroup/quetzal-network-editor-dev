import{bY as le,i as Z,r as x,bZ as re,w as ue,u as C,h as Q,aP as g,bo as ie,_ as ce,f as de,e as f,o as pe,j as _,k as O,q as t,v as a,a6 as R,F as p,y as l,z as r,J as A,b7 as U,K as j,B as E,aM as fe,L as ve,M as me,m as K,R as ge,H as he,b8 as ke,aa as G,V as S,$ as H,a0 as Y,al as _e,X as ye,T as W,a5 as X,ar as we}from"./index-jhEAeLxi.js";const xe=le("runMapMatching",()=>{const{$gettext:P}=Z(),o=x("arn:aws:states:ca-central-1:142023388927:stateMachine:quetzal-mapmatching-api"),h=x("quetzal-api-bucket"),e=x("");function b(){e.value=ie()}const k=x([]),{error:v,running:y,errorMessage:I,startExecution:w,status:V,stopExecution:T}=re(o.value);ue(V,async i=>{i==="SUCCEEDED"&&(y.value=!0,await N(),await M(),y.value=!1,V.value="",C().changeNotification({text:P("PT network successfully Mapmatched. See results pages for more details."),autoClose:!1,color:"success"}))});async function N(){C().initLinks();const u=Q();u.unloadFiles();const c=await g.readJson(h.value,e.value.concat("/links_final.geojson"));u.appendNewLinks(c);const m=await g.readJson(h.value,e.value.concat("/nodes_final.geojson"));u.appendNewNodes(m)}async function M(){let i=await g.listFiles(h.value,e.value);i=i.filter(c=>c.endsWith(".csv"));const u=[];for(const c of i){let m=c.split("/").slice(-1);m="outputs/"+m;const L=await g.readBytes(h.value,c);u.push({path:m,content:L})}u.length>0&&C().loadOtherFiles(u)}return{stateMachineArn:o,bucket:h,callID:e,exclusions:k,status:V,running:y,error:v,errorMessage:I,setCallID:b,startExecution:w,stopExecution:T,getCSVs:M}}),be={class:"background"},Ve={key:1,class:"text-grey text-caption align-self-center"},Me={__name:"MapMatching",setup(P){const{$gettext:o}=Z(),h=C(),e=xe(),b=de(),k=Q(),v=x(!1),y=f(()=>b.rlinksIsEmpty),I=f(()=>k.linksIsEmpty),w=f(()=>e.running),V=f(()=>e.status),T=f(()=>e.error),N=f(()=>e.errorMessage),M=f(()=>e.timer),i=f(()=>e.callID),u=f(()=>e.bucket),c=x(!1);pe(()=>{e.exclusions=e.exclusions.filter(d=>J.value.has(d))});async function m(){e.running=!0,e.setCallID(),L(),await ee(),e.startExecution({callID:i.value,exclusions:e.exclusions})}function L(){let s=k.tripId.length/6;function n(ae,se=20,ne=[12,8,4,1]){let oe=Math.floor(ae/se),$=100,F=12;for(let q of ne){let z=Math.abs(oe-q);z<$&&($=z,F=q)}return F}const D=n(s,20,[12,8,4,1]);e.timer=s/D+20+20+10}function B(){h.initrLinks(),v.value=!1,m()}async function ee(){const d=[];d.push(g.putObject(u.value,i.value.concat("/road_links.geojson"),JSON.stringify(b.rlinks))),d.push(g.putObject(u.value,i.value.concat("/road_nodes.geojson"),JSON.stringify(b.rnodes))),d.push(g.putObject(u.value,i.value.concat("/links.geojson"),JSON.stringify(k.links))),d.push(g.putObject(u.value,i.value.concat("/nodes.geojson"),JSON.stringify(k.nodes)));try{await Promise.all(d)}catch(s){C().changeAlert(s)}}const J=f(()=>new Set(k.links.features.map(d=>d.properties.route_type)));function te(){e.stopExecution()}return(d,s)=>(_(),O("section",be,[t(W,{class:"card"},{default:a(()=>[t(R,null,{default:a(()=>[p(l(r(o)("Match PT network on road network")),1)]),_:1}),y.value||I.value?(_(),A(U,{key:0},{default:a(()=>[p(l(r(o)("need a road and a PT network")),1)]),_:1})):j("",!0),t(E),t(U,null,{default:a(()=>[T.value?(_(),A(fe,{key:0,density:"compact",width:"50rem",variant:"outlined",text:"",type:"error"},{default:a(()=>[p(l(r(o)("There as been an error Mapmatching.             Please try again. If the problem persist, contact us."))+" ",1),(_(!0),O(ve,null,me(Object.keys(N.value),n=>(_(),O("p",{key:n},[K("b",null,l(n)+": ",1),p(l(N.value[n]),1)]))),128))]),_:1})):j("",!0)]),_:1}),t(ge),t(E),t(he,{modelValue:r(e).exclusions,"onUpdate:modelValue":s[0]||(s[0]=n=>r(e).exclusions=n),items:J.value,hint:c.value?r(o)("routes type to not mapmatch (ex subway are not on roads)"):"",label:"route_type exclusion",variant:"underlined",multiple:""},{selection:a(({item:n,index:D})=>[D<2?(_(),A(ke,{key:0},{default:a(()=>[K("span",null,l(n.title),1)]),_:2},1024)):j("",!0),D===2?(_(),O("span",Ve," (+"+l(r(e).exclusions.length-2)+" others) ",1)):j("",!0)]),_:1},8,["modelValue","items","hint"]),t(G,null,{default:a(()=>[t(S,{variant:"outlined",color:"success",loading:w.value,disabled:w.value||y.value||I.value,onClick:m},{default:a(()=>[p(l(r(o)("Process")),1)]),_:1},8,["loading","disabled"]),H(t(S,{color:"grey",variant:"text",onClick:s[1]||(s[1]=n=>te())},{default:a(()=>[p(l(r(o)("Abort")),1)]),_:1},512),[[Y,w.value&&V.value==="RUNNING"]]),H(t(_e,null,{default:a(()=>[p(" ~ "+l(M.value>0?Math.ceil(M.value/60):r(o)("less than 1"))+l(r(o)(" minutes remaining")),1)]),_:1},512),[[Y,w.value]]),t(E),t(S,{size:"small",onClick:s[2]||(s[2]=n=>c.value=!c.value)},{default:a(()=>[t(ye,null,{default:a(()=>[p("far fa-question-circle small")]),_:1})]),_:1})]),_:1})]),_:1}),t(we,{modelValue:v.value,"onUpdate:modelValue":s[4]||(s[4]=n=>v.value=n),persistent:"","max-width":"500",onKeydown:[X(B,["enter"]),s[5]||(s[5]=X(n=>v.value=!1,["esc"]))]},{default:a(()=>[t(W,null,{default:a(()=>[t(R,{class:"text-h5"},{default:a(()=>[p(l(r(o)("Overwrite current road network ?")),1)]),_:1}),t(G,null,{default:a(()=>[t(E),t(S,{color:"regular",onClick:s[3]||(s[3]=n=>v.value=!v.value)},{default:a(()=>[p(l(r(o)("No")),1)]),_:1}),t(S,{color:"primary",onClick:B},{default:a(()=>[p(l(r(o)("Yes")),1)]),_:1})]),_:1})]),_:1})]),_:1},8,["modelValue"])]))}},Ce=ce(Me,[["__scopeId","data-v-eb8b5772"]]);export{Ce as default};
