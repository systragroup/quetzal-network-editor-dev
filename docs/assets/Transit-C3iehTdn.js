import{bI as Q,u as $,r as c,bJ as H,w as X,bt as Y,a as E,aB as p,al as ee,aa as te,ac as ae,c as o,d as se,o as ne,f as oe,g as re,j as l,i as b,m as D,a9 as ue,af as le,a8 as ie,D as ce,L as A,B as F,C as q,W as pe,Q as de,am as J,aJ as he,_ as fe}from"./index-CQzvEvj4.js";import{S as ve}from"./SimpleForm-6Ds9QU71.js";import{W as B}from"./Warning-DrZ1z1Rh.js";import{M as me}from"./Markdown-CcNyNrcH.js";const ge=Q("runTransit",()=>{const{$gettext:N}=$(),u=c("arn:aws:states:ca-central-1:142023388927:stateMachine:quetzal-transit-api"),v=c("quetzal-api-bucket"),t=c("");function m(){t.value=Y()}const S=c(0),{error:I,running:_,errorMessage:j,startExecution:k,status:w,stopExecution:C}=H(),g=c({general:{step_size:.001,use_road_network:!1},catchment_radius:{},footpaths:{max_length:1e3,speed:3,n_ntlegs:2}});function d(r){r.general.forEach(a=>g.value.general[a.key]=a.value),r.footpaths.forEach(a=>g.value.footpaths[a.key]=a.value),r.catchment_radius.forEach(a=>g.value.catchment_radius[a.key]=a.value)}X(w,async r=>{r==="SUCCEEDED"&&(_.value=!0,await y(),_.value=!1,w.value="",E().changeNotification({text:N("Success. See results pages for more details."),autoClose:!1,color:"success"}))});async function y(){let r=await p.listFiles(v.value,`${t.value}/outputs/`);const a=[];for(const h of r){let i=h.split("/").slice(-1);i="microservices/"+i;let f=null;i.endsWith(".geojson")||i.endsWith(".json")?f=await p.readJson(v.value,h):f=await p.readBytes(v.value,h),a.push({path:i,content:f})}a.length>0&&E().loadOtherFiles(a)}return{stateMachineArn:u,bucket:v,callID:t,status:w,running:_,error:I,errorMessage:j,parameters:g,timer:S,saveParams:d,setCallID:m,startExecution:k,stopExecution:C}}),ye={class:"background"},_e=`
# Transit Analysis
## inputs
* **PT network**
* **inputs/population.geojson** (optional) with **density** in $\\frac{people}{km^2}$.

* **road network** (optional)
* od/od.geojson (optional) 
## outputs
* metrics (.csv) per **route_id** and **route_type**. 

* the path used by each OD (*If OD are provided*).
* catchemnt radius on each PT nodes
`,ke=ee({__name:"Transit",setup(N){const{$gettext:u}=$(),v=E(),t=ge(),m=te(),S=ae(),I=o(()=>m.linksIsEmpty),_=o(()=>S.layerIsEmpty),j=o(()=>t.stateMachineArn),k=o(()=>t.running),w=o(()=>t.status),C=o(()=>t.error),g=o(()=>t.errorMessage),d=o(()=>t.callID),y=o(()=>t.bucket),r=o(()=>t.parameters),a=o(()=>v.otherFiles.filter(e=>e.path==="inputs/population.geojson")[0]),h=o(()=>I.value),i=c([{key:"step_size",label:u("Population mesh size (0.001 ~100m)"),value:null,type:"number",units:"degree",hint:"Population is created from zones as a mesh of point with this distance",rules:["required","nonNegative"]},{key:"use_road_network",label:u("use road network"),value:null,type:"boolean",hint:"Use road network nodes to compute population mesh (population is distributed on road nodes.)",rules:["required","nonNegative"]}]),f=c([{key:"max_length",label:u("Footpaths max length"),value:null,type:"number",units:"metres",hint:"as the crow flight walking speed",rules:["required","nonNegative"]},{key:"speed",label:u("Footpaths speed"),value:null,units:"km/h",type:"number",hint:"max length for a footpath (walk distance between stations)",rules:["required","largerThanZero"]},{key:"n_ntlegs",label:u("Footpaths number of connection"),value:null,type:"number",hint:"number of connection between the origin (or destination) and the footpaths",rules:["required","largerThanZero"]}]),x=c([]),O=o(()=>[...i.value,...x.value,...f.value]);function z(e){return{key:e,label:`${e} catchment Radius`,value:500,type:"number",units:"metres",hint:"vehicle type catchment radius",rules:["required","nonNegative"]}}const T=o(()=>Array.from(new Set(m.links.features.map(e=>e.properties.route_type))));function U(){T.value.forEach(s=>x.value.push(z(s)));const e=new Set(Object.keys(r.value.catchment_radius));x.value.forEach(s=>{e.has(s.key)&&(s.value=r.value.catchment_radius[s.key])});const n=new Set(T.value);e.forEach(s=>{n.has(s)||delete r.value.catchment_radius[s]})}function W(){i.value.forEach(e=>e.value=r.value.general[e.key])}function G(){f.value.forEach(e=>e.value=r.value.footpaths[e.key])}se(()=>{W(),G(),U()}),ne(()=>{P()});function P(){t.saveParams({general:i.value,footpaths:f.value,catchment_radius:x.value})}const M=c();async function L(){var V;if(!await M.value.validate())return;P();const n=J();t.running=!0,t.setCallID(),await K();const s=he(t.parameters),R={scenario_path_S3:d.value,launcher_arg:{training_folder:"/tmp",params:s},metadata:{user_email:(V=n.cognitoInfo)==null?void 0:V.email}};t.startExecution(j.value,R)}async function K(){const e=J(),n=[];try{n.push(p.putObject(y.value,d.value.concat("/inputs/pt/links.geojson"),JSON.stringify(m.links))),n.push(p.putObject(y.value,d.value.concat("/inputs/pt/nodes.geojson"),JSON.stringify(m.nodes))),_.value||n.push(p.putObject(y.value,d.value.concat("/inputs/od/od.geojson"),JSON.stringify(S.layer))),a.value&&(a.value.content==null&&e.model!==null&&(a.value.content=await p.readJson(e.model,e.scenario+"/"+a.value.path)),n.push(p.putObject(y.value,d.value.concat("/inputs/population.geojson"),JSON.stringify(a.value.content)))),await Promise.all(n)}catch(s){E().changeAlert(s),t.running=!1}}function Z(){t.stopExecution()}return(e,n)=>(re(),oe("section",ye,[l(de,{class:"card"},{default:b(()=>[l(me,{source:_e}),l(B,{show:h.value,title:D(u)("need PT network"),type:"warning"},null,8,["show","title"]),l(B,{show:C.value,messages:g.value},null,8,["show","messages"]),l(ue),l(le),l(ve,{ref_key:"formRef",ref:M,modelValue:O.value,"onUpdate:modelValue":n[1]||(n[1]=s=>O.value=s)},{default:b(()=>[l(ie,null,{default:b(()=>[l(A,{variant:"outlined",color:"success",loading:k.value,disabled:k.value||h.value,onClick:L},{default:b(()=>[F(q(D(u)("Process")),1)]),_:1},8,["loading","disabled"]),ce(l(A,{color:"grey",variant:"text",onClick:n[0]||(n[0]=s=>Z())},{default:b(()=>[F(q(D(u)("Abort")),1)]),_:1},512),[[pe,k.value&&w.value==="RUNNING"]])]),_:1})]),_:1},8,["modelValue"])]),_:1})]))}}),Ee=fe(ke,[["__scopeId","data-v-71e7239f"]]);export{Ee as default};
