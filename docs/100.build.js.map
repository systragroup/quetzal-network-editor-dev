{"version":3,"file":"100.build.js","mappings":"6JAAA,IAAIA,EAAS,WACX,IAAIC,EAAMC,KACRC,EAAKF,EAAIG,MAAMD,GACjB,OAAOA,EACL,UACA,CACEA,EACE,kBACAF,EAAII,GACF,CACEC,MAAO,CACL,YAAa,SACbC,OAAQ,CACNC,KAAM,UACNC,KAAMR,EAAIS,WAAaT,EAAIU,eAAiBV,EAAIW,OAChDC,OAAQ,EACRC,UAAW,SAEb,WAAY,SACZC,MAAO,CACLC,aAAa,EACbR,KAAM,OACNS,QAAShB,EAAIiB,QAAQC,MACrBC,MAAO,CACL,aAAc,CACZ,OACA,CAAC,MAAO,eACR,CAAC,SAAU,IAAK,CAAC,MAAO,gBACxB,WAEF,eAAgB,CACd,OACA,CAAC,UAAWnB,EAAIoB,cAAc,GAC9B,GACA,GAEF,aAAc,CACZ,OACA,CAAC,UAAW,CAAC,gBAAiB,UAAU,GACxC,GACA,GAEF,YAAa,CACX,OACA,CAAC,UAAW,CAAC,gBAAiB,UAAU,GACxC,EACA,OAMVpB,EAAIoB,aACA,CAAC,EACD,CACEC,WAAYrB,EAAIsB,SAChBC,WAAYvB,EAAIwB,UAChBC,MAAOzB,EAAI0B,YACXC,YAAa3B,EAAI4B,kBAI3B5B,EAAI6B,GAAG,KACP3B,EAAG,gBAAiB,CAClBG,MAAO,CACL,YAAa,SACbE,KAAM,SACND,OAAQ,SACR,WAAY,eACZQ,MAAO,CACLP,KAAM,SACNS,QAAShB,EAAIiB,QAAQa,SACrBC,OAAQ,CACN,mBAAoB,OACpB,iBAAkB,IAClB,yBAAyB,EACzB,aAAc,QACd,YAAa,CACX,OACA,CAAC,MAAO,UACR,CACE,OACA,CAAC,aAAc,CAAC,YAAa,CAAC,MAAO,YACrC,GACA,GAEF,IAEF,cAAe,IAEjBZ,MAAO,CACL,aAAc,CACZ,OACA,CAAC,MAAO,eACR,CAAC,SAAU,IAAK,CAAC,MAAO,gBACxB,gBAMVnB,EAAI6B,GAAG,KACP3B,EACE,kBACAF,EAAII,GACF,CACEC,MAAO,CACL,YAAa,SACbC,OAAQ,CACNC,KAAM,UACNC,KAAMR,EAAIS,WAAaT,EAAIgC,eAAiBhC,EAAIiC,OAChDrB,OAAQ,EACRC,UAAW,SAEb,WAAY,SACZC,MAAO,CACLC,aAAa,EACbR,KAAM,SACNS,QAAShB,EAAIiB,QAAQa,SACrBX,MAAO,CACL,eAAgB,CACd,OACA,CAAC,UAAWnB,EAAIoB,cAAc,GAC9B,UACA,WAEF,sBAAuB,UACvB,sBAAuB,EACvB,gBAAiB,CACf,OACA,CAAC,UAAW,CAAC,gBAAiB,UAAU,GACxC,GACA,GAEF,cAAe,CACb,OACA,CAAC,UAAW,CAAC,gBAAiB,UAAU,GACxC,GACA,OAMVpB,EAAIoB,aACA,CAAC,EACD,CACEC,WAAYrB,EAAIsB,SAChBC,WAAYvB,EAAIwB,UAChBU,UAAWlC,EAAImC,SACfR,YAAa3B,EAAIoC,mBAI3BpC,EAAI6B,GAAG,KACP3B,EAAG,kBAAmB,CACpBG,MAAO,CACL,YAAa,eACbC,OAAQ,CACNC,KAAM,UACNC,KAAMR,EAAIS,WACNT,EAAIqC,qBACJrC,EAAIsC,OAAOC,QAAQC,aACvB5B,OAAQ,EACRC,UAAW,SAEb,WAAY,eACZC,MAAO,CACLC,aAAa,EACbR,KAAM,SACNS,QAAShB,EAAIiB,QAAQa,SACrBX,MAAO,CACL,eAAgB,UAChB,iBAAkB,GAClB,gBAAiB,CACf,OACA,CAAC,UAAW,CAAC,gBAAiB,UAAU,GACxC,GACA,GAEF,cAAe,CACb,OACA,CAAC,UAAW,CAAC,gBAAiB,UAAU,GACxC,GACA,GAEF,sBAAuB,UACvB,sBAAuB,KAI7BsB,GAAI,CACFhB,MAAOzB,EAAI0B,YACXgB,UAAW1C,EAAIsB,SACfC,WAAYvB,EAAIwB,UAChBU,UAAWlC,EAAImC,SACfR,YAAa3B,EAAIoC,mBAGrBpC,EAAI6B,GAAG,KACP3B,EACE,WACA,CACEG,MAAO,CACL,gBAAgB,EAChBsC,OAAQ3C,EAAI4C,YAAYD,OACxBE,YAAa7C,EAAI4C,YAAYC,aAE/BJ,GAAI,CACFK,MAAO,SAAUC,GACf/C,EAAI4C,YAAYD,QAAS,CAC3B,IAGJ,CACEzC,EACE,OACA,CACEuC,GAAI,CACFlB,WAAY,SAAUwB,GACpB/C,EAAI4C,YAAYD,QAAS,CAC3B,IAGJ,CACEzC,EACE,SACA,CAAEG,MAAO,CAAE2C,MAAO,GAAIC,KAAM,KAC5B,CACE/C,EACE,oBACAF,EAAIkD,GAAGlD,EAAI4C,YAAYO,SAAS,SAAUC,GACxC,OAAOlD,EACL,cACA,CAAEmD,IAAKD,EAAOE,IACd,CACEpD,EACE,sBACA,CACEA,EACE,QACA,CACEG,MAAO,CAAEkD,SAAU,GAAIC,MAAO,IAC9Bf,GAAI,CACFhB,MAAO,SAAUsB,GACf,OAAO/C,EAAIyD,YAAY,CACrBL,OAAQA,EACRM,QAAS1D,EAAI4C,YAAYc,QACzBb,YACE7C,EAAI4C,YAAYC,aAEtB,IAGJ,CACE7C,EAAI6B,GACF,qBACE7B,EAAI2D,GAAG3D,EAAI4D,SAASR,IACpB,uBAKV,IAGJ,EAEJ,IACA,IAGJ,IAGJ,MAKR,EAEJ,EAEArD,EAAO8D,eAAgB,E,6DCpRvB,MCR6H,EDS7H,CACEC,KAAM,cACNC,WAAY,CACVC,gBAAe,KACfC,cAAa,KACbC,SAAQ,MAEVC,MAAO,CAAC,MAAO,eAAgB,aAAc,cAC7CC,OAAQ,CAAC,gBAET5D,KAAK,KACI,CACL6D,eAAgB,KAChBC,aAAc,CAAC,EACfC,aAAc,CAAC,EACfC,cAAc,EACdC,aAAc,CAAC,EACf/D,eAAgB,CAAC,EACjBsB,eAAgB,CAAC,EACjBK,qBAAsB,CAAC,EACvBqC,KAAM,KACNzD,QAAS,CACPC,MAAO,EACPY,SAAU,IAEZc,YAAa,CACXC,YAAa,CAAC,EAAG,GACjBF,QAAQ,EACRQ,QAAS,GACTO,QAAS,QAKfiB,SAAU,CACRC,uBAA0B,OAAO3E,KAAKqC,OAAOC,QAAQsC,iBAAkB,EACvEC,iBAAoB,OAAO7E,KAAKqC,OAAOC,QAAQuC,cAAe,EAC9D7C,SAAY,OAAOhC,KAAKqC,OAAOC,QAAQwC,aAAc,EACrDpE,SAAY,OAAOV,KAAKqC,OAAOC,QAAQyC,aAAc,EACrDC,eACE,OAAOhF,KAAKiF,WAAajF,KAAKqC,OAAOC,QAAQ0C,aAAahF,KAAKS,gBAAkBT,KAAKqC,OAAOC,QAAQC,YACvG,GAIF2C,MAAO,CACLD,aAAgBjF,KAAKmF,WAAY,EACjCN,eAAgBO,GAAOpF,KAAKmF,WAAY,EACxC3E,WAAY4E,GACNA,GACFpF,KAAKqF,IAAI7C,GAAG,UAAWxC,KAAKmF,WAC5BnF,KAAKqF,IAAI7C,GAAG,UAAWxC,KAAKmF,aAE5BnF,KAAKqF,IAAIC,IAAI,UAAWtF,KAAKmF,WAC7BnF,KAAKqF,IAAIC,IAAI,UAAWtF,KAAKmF,WAEjC,GAGFI,UACEvF,KAAK+B,eAAiByD,gBAAgBxF,KAAKqC,OAAOC,QAAQC,cAC1DvC,KAAKoC,qBAAuBoD,gBAAgBxF,KAAKqC,OAAOC,QAAQC,cAChEvC,KAAKS,eAAiB+E,gBAAgBxF,KAAKqC,OAAOC,QAAQmD,cAC1DzF,KAAKqF,IAAI7C,GAAG,UAAWxC,KAAKmF,WAC5BnF,KAAKqF,IAAI7C,GAAG,UAAWxC,KAAKmF,UAC9B,EACAO,gBAEE1F,KAAKqF,IAAIM,YAAY,eACvB,EAEAC,QAAS,CACPT,YAKE,MAAMU,EAAS7F,KAAKqF,IAAIF,YAMxB,GAJAnF,KAAKyE,MAAO,QAAO,OAAY,CAACoB,EAAOC,IAAIC,IAAKF,EAAOC,IAAIE,IAAKH,EAAOI,IAAIF,IAAKF,EAAOI,IAAID,MAAO,IAI9FhG,KAAKqF,IAAIa,UAAYlG,KAAKgB,QAAQa,SAAU,CAE9C7B,KAAK+B,eAAeoE,SAAWnG,KAAKgC,OAAOmE,SAASC,QAAOC,IAAQ,QAAgBrG,KAAKyE,KAAM4B,KAC9FrG,KAAKoC,qBAAqB+D,SAAWnG,KAAKgF,aAAamB,SAASC,QAAOC,IAAQ,QAAgBrG,KAAKyE,KAAM4B,KAE1G,MAAMC,EAAU,IAAIC,IAAIvG,KAAK+B,eAAeoE,SAASd,KAAIgB,GAAQA,EAAKG,WAAWC,SACjFzG,KAAKS,eAAe0F,SAAWnG,KAAKU,OAAOyF,SAASC,QAAOM,GAAQJ,EAAQK,IAAID,EAAKF,WAAWI,GAAKN,EAAQK,IAAID,EAAKF,WAAWK,IAClI,MAAW7G,KAAKqF,IAAIa,UAAYlG,KAAKgB,QAAQC,OAE3CjB,KAAKS,eAAe0F,SAAWnG,KAAKU,OAAOyF,SAC3CnG,KAAK+B,eAAeoE,SAAW,GAC/BnG,KAAKoC,qBAAqB+D,SAAW,KAErCnG,KAAKS,eAAe0F,SAAW,GAC/BnG,KAAK+B,eAAeoE,SAAW,GAC/BnG,KAAKoC,qBAAqB+D,SAAW,GAEzC,EACA9E,SAAUyF,GACR,GAAI9G,KAAKQ,aACHR,KAAK+G,OAAOC,UAAUhH,KAAK+G,MAAME,SACT,OAAxBjH,KAAKoE,gBAA2D,WAAhCpE,KAAKoE,eAAe8C,SAAsB,CAC5E,IAAKlH,KAAKuE,cAAgBvE,KAAK2E,qBAAqBwC,OAAS,EAAG,CAC9D,MAAMC,EAAkBN,EAAMO,YAAYlB,SAAS,GAClB,WAA7BiB,EAAgBvG,MAAMwC,KACxBrD,KAAK+G,MAAQ,IAAI,WAAe,CAAEO,aAAa,IAC5CC,UAAU,CAACT,EAAMO,YAAYG,OAAOzB,IAAKe,EAAMO,YAAYG,OAAOxB,MAClEyB,QAAQL,EAAgBZ,WAAWxG,KAAK2E,uBACxC+C,MAAMZ,EAAMzB,KAEnB,CACArF,KAAKqF,IAAIsC,YAAYC,MAAMC,OAAS,UACR,OAAxB7H,KAAKoE,gBACPpE,KAAKqF,IAAIyC,gBACP,CAAEzH,OAAQL,KAAKoE,eAAe8C,QAAS7D,GAAIrD,KAAKoE,eAAef,GAAG,IAClE,CAAE0E,OAAO,IAIb,MAAMC,EAAc,IAAI,IAAIzB,IAAIO,EAAMO,YAAYlB,SAASd,KAAI4C,GAAQA,EAAK5E,OAC5ErD,KAAKoE,eAAiB,CAAE8C,QAASJ,EAAMI,QAAS7D,GAAI2E,GACpDhI,KAAKqF,IAAIyC,gBACP,CAAEzH,OAAQL,KAAKoE,eAAe8C,QAAS7D,GAAIrD,KAAKoE,eAAef,GAAG,IAClE,CAAE0E,OAAO,IAGX/H,KAAKkI,MAAM,UAAW,CAAEhB,QAASlH,KAAKoE,eAAe8C,QAASiB,WAAYnI,KAAKoE,eAAef,IAChG,CAEJ,EAEA9B,UAAWuF,GACL9G,KAAKQ,aAEHR,KAAK+G,OAAOC,UAAUhH,KAAK+G,MAAME,SACT,OAAxBjH,KAAKoE,iBAED,CAAC,SAAU,gBAAgBgE,SAASpI,KAAKoE,gBAAgB8C,UAA+B,WAAnBJ,GAAOI,UAE5ElH,KAAKqI,aACPrI,KAAKsI,UAAW,GAGhBtI,KAAKqF,IAAIsC,YAAYC,MAAMC,OAAS,GACpC7H,KAAKqF,IAAIyC,gBACP,CAAEzH,OAAQL,KAAKoE,eAAe8C,QAAS7D,GAAIrD,KAAKoE,eAAef,GAAG,IAClE,CAAE0E,OAAO,IAEX/H,KAAKoE,eAAiB,KACtBpE,KAAKkI,MAAM,WAAYpB,MAKjC,EAEArF,YAAaqF,GACX,GAAI9G,KAAKQ,YACqB,OAAxBR,KAAKoE,iBAIPpE,KAAKoH,gBAAkBpH,KAAKoE,eAAef,GAGd,OAAzBrD,KAAKoH,iBAC6B,WAAhCpH,KAAKoE,eAAe8C,SAAsB,CAC5C,MAAM/D,EAASnD,KAAKiF,WAAa,yBAA2B,uBACtDzD,EAAQ,CACZ+G,cAAevI,KAAKoH,gBACpBjE,OAAQA,EACRqE,OAAQV,EAAMO,YAAYG,QAE5BxH,KAAKkI,MAAM,eAAgB1G,GAC3BxB,KAAKmF,WACP,CAIR,EAEAxD,eAAgBmF,GACV9G,KAAKQ,YAC6B,WAAhCR,KAAKoE,eAAe8C,UACtBlH,KAAK2C,YAAYC,YAAc,CAACkE,EAAMO,YAAYG,OAAOzB,IAAKe,EAAMO,YAAYG,OAAOxB,KACvFhG,KAAK2C,YAAYD,QAAS,EAC1B1C,KAAK2C,YAAYc,QAAUzD,KAAKoE,eAAef,GAC/CrD,KAAK2C,YAAYO,QACjB,CACW,kBACA,gBAIjB,EACAM,YAAasD,GACX,MAAMtF,EAAQ,CACZ+G,cAAezB,EAAMrD,QACrBN,OAAQ2D,EAAM3D,OACdqE,OAAQV,EAAMlE,aAEhB5C,KAAKkI,MAAM,eAAgB1G,GAC3BxB,KAAK2C,YAAYD,QAAS,EAC1B1C,KAAK2C,YAAYrC,KAAO,KACxBN,KAAKmF,WACP,EAEAhD,gBAAiB2E,GACf,GAAI9G,KAAKQ,WAAY,CACnB,MAAM2F,EAAWnG,KAAKqF,IAAImD,oBAAoBxI,KAAKoE,eAAe8C,SAGlE,GAFAlH,KAAKoH,gBAAkBjB,EAASC,QAAO6B,GAAQjI,KAAKoE,eAAef,GAAG+E,SAASH,EAAK5E,MAEhFrD,KAAKoH,gBAAgBD,OAAS,EAChC,GAAqC,WAAjCnH,KAAKoE,gBAAgB8C,QAAsB,CAC7C,MAAM1F,EAAQ,CACZ4F,gBAAiBpH,KAAKoH,gBAAgB,GACtCjE,OAAQ,kBACRqE,OAAQV,EAAMO,YAAYG,QAE5BxH,KAAKkI,MAAM,eAAgB1G,EAC7B,MAAO,GAAqC,iBAAjCxB,KAAKoE,gBAAgB8C,QAA4B,CAC1D,MAAM1F,EAAQ,CACZ4F,gBAAiBpH,KAAKoH,gBAAgB,GACtCjE,OAAQ,qBACRqE,OAAQ,MAEVxH,KAAKkI,MAAM,eAAgB1G,GAC3BxB,KAAKmF,WACP,CAEJ,CACF,EAEAjD,SAAU4E,GACR,GAAI9G,KAAKQ,YACwC,IAA3CsG,EAAMO,YAAYoB,cAAcC,OACtC,CAAC,SAAU,gBAAgBN,SAASpI,KAAKoE,eAAe8C,SAAU,CAC9DJ,EAAMO,YAAYsB,iBAClB3I,KAAKqF,IAAIsC,YAAYC,MAAMC,OAAS,OAEpC7H,KAAKqI,cAAe,EAEpB,MAAMlC,EAAWnG,KAAKqF,IAAImD,oBAAoBxI,KAAKoE,eAAe8C,SAClElH,KAAKoH,gBAAkBjB,EAASC,QAAO6B,GAAQA,EAAK5E,KAAOrD,KAAKoE,eAAef,GAAG,KAAI,GAEtFrD,KAAKuE,cAAe,EACgB,WAAhCvE,KAAKoE,eAAe8C,SACtBlH,KAAKqC,OAAOuG,OAAO,oBAAqB,CAAEC,aAAc7I,KAAKoH,kBAG/DpH,KAAKqF,IAAI7C,GAAG,YAAaxC,KAAK8I,QAC9B9I,KAAKqF,IAAI7C,GAAG,UAAWxC,KAAK+I,eAC9B,CAEJ,EACAD,OAAQhC,GAGN,GAAI9G,KAAKqF,IAAI2D,UAAYhJ,KAAKsI,UAAYtI,KAAKoH,gBAAiB,CAC9D,MAAM5F,EAAQ,CACZ4F,gBAAiBpH,KAAKoH,gBACtBjE,OAAQ,KACRqE,OAAQyB,OAAOC,OAAOpC,EAAMU,SAEM,iBAAhCxH,KAAKoE,eAAe8C,SACtB1F,EAAM2B,OAAS,eACfnD,KAAKkI,MAAM,eAAgB1G,GAE3BxB,KAAKoC,qBAAqB+D,SAAWnG,KAAKgF,aAAamB,SAASC,QAAOC,IACrE,QAAgBrG,KAAKyE,KAAM4B,OAE7B7E,EAAM2B,OAAS,aACfnD,KAAKkI,MAAM,eAAgB1G,GAE/B,CACF,EACAuH,eAAgBjC,GACV9G,KAAKQ,aAEPR,KAAKqF,IAAIsC,YAAYC,MAAMC,OAAS,UACpC7H,KAAKqF,IAAIC,IAAI,YAAatF,KAAK8I,QAE/B9I,KAAKqI,cAAe,EACpBrI,KAAKsI,UAAW,EAChBtI,KAAKuE,cAAe,EAGpBvE,KAAKqF,IAAIsC,YAAYC,MAAMC,OAAS,GACpC7H,KAAKqF,IAAIyC,gBACP,CAAEzH,OAAQL,KAAKoE,eAAe8C,QAAS7D,GAAIrD,KAAKoE,eAAef,GAAG,IAClE,CAAE0E,OAAO,IAEX/H,KAAKoE,eAAiB,KACtBpE,KAAKqF,IAAIC,IAAI,UAAWtF,KAAK+I,gBAKjC,IEpSJ,GAXgB,E,QAAA,GACd,EACAjJ,EHkRoB,IGhRpB,EACA,KACA,WACA,MAI8B,O","sources":["webpack://quetzal-network-editor/./src/components/RoadLinks.vue?d015","webpack://quetzal-network-editor/src/components/RoadLinks.vue","webpack://quetzal-network-editor/./src/components/RoadLinks.vue?4ca6","webpack://quetzal-network-editor/./src/components/RoadLinks.vue"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"section\",\n    [\n      _c(\n        \"MglGeojsonLayer\",\n        _vm._g(\n          {\n            attrs: {\n              \"source-id\": \"rlinks\",\n              source: {\n                type: \"geojson\",\n                data: _vm.isRoadMode ? _vm.renderedrLinks : _vm.rlinks,\n                buffer: 0,\n                promoteId: \"index\",\n              },\n              \"layer-id\": \"rlinks\",\n              layer: {\n                interactive: true,\n                type: \"line\",\n                minzoom: _vm.minZoom.links,\n                paint: {\n                  \"line-color\": [\n                    \"case\",\n                    [\"has\", \"route_color\"],\n                    [\"concat\", \"#\", [\"get\", \"route_color\"]],\n                    \"#B5E0D6\",\n                  ],\n                  \"line-opacity\": [\n                    \"case\",\n                    [\"boolean\", _vm.isEditorMode, false],\n                    0.5,\n                    1,\n                  ],\n                  \"line-width\": [\n                    \"case\",\n                    [\"boolean\", [\"feature-state\", \"hover\"], false],\n                    12,\n                    2,\n                  ],\n                  \"line-blur\": [\n                    \"case\",\n                    [\"boolean\", [\"feature-state\", \"hover\"], false],\n                    6,\n                    0,\n                  ],\n                },\n              },\n            },\n          },\n          _vm.isEditorMode\n            ? {}\n            : {\n                mouseenter: _vm.onCursor,\n                mouseleave: _vm.offCursor,\n                click: _vm.selectClick,\n                contextmenu: _vm.linkRightClick,\n              }\n        )\n      ),\n      _vm._v(\" \"),\n      _c(\"MglImageLayer\", {\n        attrs: {\n          \"source-id\": \"rlinks\",\n          type: \"symbol\",\n          source: \"rlinks\",\n          \"layer-id\": \"arrow-rlinks\",\n          layer: {\n            type: \"symbol\",\n            minzoom: _vm.minZoom.rendered,\n            layout: {\n              \"symbol-placement\": \"line\",\n              \"symbol-spacing\": 200,\n              \"icon-ignore-placement\": true,\n              \"icon-image\": \"arrow\",\n              \"icon-size\": [\n                \"case\",\n                [\"has\", \"oneway\"],\n                [\n                  \"case\",\n                  [\"to-boolean\", [\"to-number\", [\"get\", \"oneway\"]]],\n                  0.3,\n                  0,\n                ],\n                0.3,\n              ],\n              \"icon-rotate\": 90,\n            },\n            paint: {\n              \"icon-color\": [\n                \"case\",\n                [\"has\", \"route_color\"],\n                [\"concat\", \"#\", [\"get\", \"route_color\"]],\n                \"#B5E0D6\",\n              ],\n            },\n          },\n        },\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"MglGeojsonLayer\",\n        _vm._g(\n          {\n            attrs: {\n              \"source-id\": \"rnodes\",\n              source: {\n                type: \"geojson\",\n                data: _vm.isRoadMode ? _vm.renderedrNodes : _vm.rnodes,\n                buffer: 0,\n                promoteId: \"index\",\n              },\n              \"layer-id\": \"rnodes\",\n              layer: {\n                interactive: true,\n                type: \"circle\",\n                minzoom: _vm.minZoom.rendered,\n                paint: {\n                  \"circle-color\": [\n                    \"case\",\n                    [\"boolean\", _vm.isEditorMode, false],\n                    \"#9E9E9E\",\n                    \"#2C3E4E\",\n                  ],\n                  \"circle-stroke-color\": \"#ffffff\",\n                  \"circle-stroke-width\": 1,\n                  \"circle-radius\": [\n                    \"case\",\n                    [\"boolean\", [\"feature-state\", \"hover\"], false],\n                    14,\n                    3,\n                  ],\n                  \"circle-blur\": [\n                    \"case\",\n                    [\"boolean\", [\"feature-state\", \"hover\"], false],\n                    0.3,\n                    0,\n                  ],\n                },\n              },\n            },\n          },\n          _vm.isEditorMode\n            ? {}\n            : {\n                mouseenter: _vm.onCursor,\n                mouseleave: _vm.offCursor,\n                mousedown: _vm.moveNode,\n                contextmenu: _vm.contextMenuNode,\n              }\n        )\n      ),\n      _vm._v(\" \"),\n      _c(\"MglGeojsonLayer\", {\n        attrs: {\n          \"source-id\": \"anchorrNodes\",\n          source: {\n            type: \"geojson\",\n            data: _vm.isRoadMode\n              ? _vm.renderedAnchorrNodes\n              : _vm.$store.getters.rnodesHeader,\n            buffer: 0,\n            promoteId: \"index\",\n          },\n          \"layer-id\": \"anchorrNodes\",\n          layer: {\n            interactive: true,\n            type: \"circle\",\n            minzoom: _vm.minZoom.rendered,\n            paint: {\n              \"circle-color\": \"#ffffff\",\n              \"circle-opacity\": 0.5,\n              \"circle-radius\": [\n                \"case\",\n                [\"boolean\", [\"feature-state\", \"hover\"], false],\n                10,\n                5,\n              ],\n              \"circle-blur\": [\n                \"case\",\n                [\"boolean\", [\"feature-state\", \"hover\"], false],\n                0.3,\n                0,\n              ],\n              \"circle-stroke-color\": \"#2C3E4E\",\n              \"circle-stroke-width\": 2,\n            },\n          },\n        },\n        on: {\n          click: _vm.selectClick,\n          mouseover: _vm.onCursor,\n          mouseleave: _vm.offCursor,\n          mousedown: _vm.moveNode,\n          contextmenu: _vm.contextMenuNode,\n        },\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"MglPopup\",\n        {\n          attrs: {\n            \"close-button\": false,\n            showed: _vm.contextMenu.showed,\n            coordinates: _vm.contextMenu.coordinates,\n          },\n          on: {\n            close: function ($event) {\n              _vm.contextMenu.showed = false\n            },\n          },\n        },\n        [\n          _c(\n            \"span\",\n            {\n              on: {\n                mouseleave: function ($event) {\n                  _vm.contextMenu.showed = false\n                },\n              },\n            },\n            [\n              _c(\n                \"v-list\",\n                { attrs: { dense: \"\", flat: \"\" } },\n                [\n                  _c(\n                    \"v-list-item-group\",\n                    _vm._l(_vm.contextMenu.actions, function (action) {\n                      return _c(\n                        \"v-list-item\",\n                        { key: action.id },\n                        [\n                          _c(\n                            \"v-list-item-content\",\n                            [\n                              _c(\n                                \"v-btn\",\n                                {\n                                  attrs: { outlined: \"\", small: \"\" },\n                                  on: {\n                                    click: function ($event) {\n                                      return _vm.actionClick({\n                                        action: action,\n                                        feature: _vm.contextMenu.feature,\n                                        coordinates:\n                                          _vm.contextMenu.coordinates,\n                                      })\n                                    },\n                                  },\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n                \" +\n                                      _vm._s(_vm.$gettext(action)) +\n                                      \"\\n              \"\n                                  ),\n                                ]\n                              ),\n                            ],\n                            1\n                          ),\n                        ],\n                        1\n                      )\n                    }),\n                    1\n                  ),\n                ],\n                1\n              ),\n            ],\n            1\n          ),\n        ]\n      ),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<!-- eslint-disable max-len -->\n<!-- eslint-disable no-return-assign -->\n<script>\nimport { MglGeojsonLayer, MglImageLayer, MglPopup } from 'vue-mapbox'\nimport mapboxgl from 'mapbox-gl'\nimport booleanContains from '@turf/boolean-contains'\nimport buffer from '@turf/buffer'\nimport bboxPolygon from '@turf/bbox-polygon'\nconst $gettext = s => s\nexport default {\n  name: 'StaticLinks',\n  components: {\n    MglGeojsonLayer,\n    MglImageLayer,\n    MglPopup,\n  },\n  props: ['map', 'isEditorMode', 'anchorMode', 'isRoadMode'],\n  events: ['clickFeature'],\n\n  data () {\n    return {\n      hoveredStateId: null,\n      visibleNodes: {},\n      visibleLinks: {},\n      disablePopup: false,\n      editorRnodes: {},\n      renderedrLinks: {},\n      renderedrNodes: {},\n      renderedAnchorrNodes: {},\n      bbox: null,\n      minZoom: {\n        links: 9,\n        rendered: 14,\n      },\n      contextMenu: {\n        coordinates: [0, 0],\n        showed: false,\n        actions: [],\n        feature: null,\n      },\n\n    }\n  },\n  computed: {\n    selectedPopupContent () { return this.$store.getters.roadsPopupContent },\n    selectedrGroup () { return this.$store.getters.selectedrGroup },\n    rnodes () { return this.$store.getters.visiblerNodes },\n    rlinks () { return this.$store.getters.visiblerLinks },\n    anchorrNodes () {\n      return this.anchorMode ? this.$store.getters.anchorrNodes(this.renderedrLinks) : this.$store.getters.rnodesHeader\n    },\n\n  },\n\n  watch: {\n    anchorMode () { this.getBounds() },\n    selectedrGroup (val) { this.getBounds() },\n    isRoadMode (val) {\n      if (val) {\n        this.map.on('dragend', this.getBounds)\n        this.map.on('zoomend', this.getBounds)\n      } else {\n        this.map.off('dragend', this.getBounds)\n        this.map.off('zoomend', this.getBounds)\n      }\n    },\n\n  },\n  created () {\n    this.renderedrNodes = structuredClone(this.$store.getters.rnodesHeader)\n    this.renderedAnchorrNodes = structuredClone(this.$store.getters.rnodesHeader)\n    this.renderedrLinks = structuredClone(this.$store.getters.rlinksHeader)\n    this.map.on('dragend', this.getBounds)\n    this.map.on('zoomend', this.getBounds)\n  },\n  beforeDestroy () {\n    // remove arrow layer first as it depend on rlink layer\n    this.map.removeLayer('arrow-rlinks')\n  },\n\n  methods: {\n    getBounds () {\n      // get map bounds and return only the features inside of it.\n      // this way, only the visible links and node are rendered and updating is fast\n      // (i.e. moving a node in real time)\n      // note only line inside the bbox (buffured) are visible.\n      const bounds = this.map.getBounds()\n      // create a BBOX with a 800m buffer\n      this.bbox = buffer(bboxPolygon([bounds._sw.lng, bounds._sw.lat, bounds._ne.lng, bounds._ne.lat]), 0.2)\n      // only get the geojson if the zoom level is bigger than the min.\n      // if not, getting all anchorpoint would be very intensive!!\n      // this way, only a small number of anchor points are computed\n      if (this.map.getZoom() > this.minZoom.rendered) {\n        // this.renderedrLinks.features = this.rlinks.features.filter(link => booleanContains(this.bbox, link))\n        this.renderedrNodes.features = this.rnodes.features.filter(node => booleanContains(this.bbox, node))\n        this.renderedAnchorrNodes.features = this.anchorrNodes.features.filter(node => booleanContains(this.bbox, node))\n\n        const nodeSet = new Set(this.renderedrNodes.features.map(node => node.properties.index))\n        this.renderedrLinks.features = this.rlinks.features.filter(link => nodeSet.has(link.properties.a) | nodeSet.has(link.properties.b))\n      } else if (this.map.getZoom() > this.minZoom.links) {\n        // ion this case. nodes are unloaded. we display links.\n        this.renderedrLinks.features = this.rlinks.features\n        this.renderedrNodes.features = []\n        this.renderedAnchorrNodes.features = []\n      } else {\n        this.renderedrLinks.features = []\n        this.renderedrNodes.features = []\n        this.renderedAnchorrNodes.features = []\n      }\n    },\n    onCursor (event) {\n      if (this.isRoadMode) {\n        if (this.popup?.isOpen()) this.popup.remove() // make sure there is no popup before creating one.\n        if (this.hoveredStateId === null || this.hoveredStateId.layerId === 'rlinks') {\n          if (!this.disablePopup && this.selectedPopupContent.length > 0) {\n            const selectedFeature = event.mapboxEvent.features[0]\n            if (selectedFeature.layer.id !== 'rnodes') {\n              this.popup = new mapboxgl.Popup({ closeButton: false })\n                .setLngLat([event.mapboxEvent.lngLat.lng, event.mapboxEvent.lngLat.lat])\n                .setHTML(selectedFeature.properties[this.selectedPopupContent])\n                .addTo(event.map)\n            }\n          }\n          this.map.getCanvas().style.cursor = 'pointer'\n          if (this.hoveredStateId !== null) {\n            this.map.setFeatureState(\n              { source: this.hoveredStateId.layerId, id: this.hoveredStateId.id[0] },\n              { hover: false },\n            )\n          }\n          // get a list of all overID. if there is multiple superposed link get all of them!\n          const uniqueArray = [...new Set(event.mapboxEvent.features.map(item => item.id))]\n          this.hoveredStateId = { layerId: event.layerId, id: uniqueArray }\n          this.map.setFeatureState(\n            { source: this.hoveredStateId.layerId, id: this.hoveredStateId.id[0] },\n            { hover: true },\n          )\n\n          this.$emit('onHover', { layerId: this.hoveredStateId.layerId, selectedId: this.hoveredStateId.id })\n        }\n      }\n    },\n\n    offCursor (event) {\n      if (this.isRoadMode) {\n      // todo: error warning is throw sometime when we move a node over another node or anchor.\n        if (this.popup?.isOpen()) this.popup.remove()\n        if (this.hoveredStateId !== null) {\n          // eslint-disable-next-line max-len\n          if (!(['rnodes', 'anchorrNodes'].includes(this.hoveredStateId?.layerId) && event?.layerId === 'rlinks')) {\n            // when we drag a node, we want to start dragging when we leave the node, but we will stay in hovering mode.\n            if (this.keepHovering) {\n              this.dragNode = true\n              // normal behaviours, hovering is false\n            } else {\n              this.map.getCanvas().style.cursor = ''\n              this.map.setFeatureState(\n                { source: this.hoveredStateId.layerId, id: this.hoveredStateId.id[0] },\n                { hover: false },\n              )\n              this.hoveredStateId = null\n              this.$emit('offHover', event)\n            }\n          }\n        }\n      }\n    },\n\n    selectClick (event) {\n      if (this.isRoadMode) {\n        if (this.hoveredStateId !== null) {\n        // Get the highlighted feature\n        // const features = this.map.querySourceFeatures(this.hoveredStateId.layerId)\n        // this.selectedFeature = features.filter(item => item.id === this.hoveredStateId.id[0])[0]\n          this.selectedFeature = this.hoveredStateId.id\n          // Emit a click base on layer type (node or link)\n\n          if (this.selectedFeature !== null) {\n            if (this.hoveredStateId.layerId === 'rlinks') {\n              const action = this.anchorMode ? 'Add Road Anchor Inline' : 'Add Road Node Inline'\n              const click = {\n                selectedIndex: this.selectedFeature,\n                action: action,\n                lngLat: event.mapboxEvent.lngLat,\n              }\n              this.$emit('clickFeature', click)\n              this.getBounds()\n            }\n          }\n        }\n      }\n    },\n\n    linkRightClick (event) {\n      if (this.isRoadMode) {\n        if (this.hoveredStateId.layerId === 'rlinks') {\n          this.contextMenu.coordinates = [event.mapboxEvent.lngLat.lng, event.mapboxEvent.lngLat.lat]\n          this.contextMenu.showed = true\n          this.contextMenu.feature = this.hoveredStateId.id\n          this.contextMenu.actions =\n          [\n            $gettext('Edit rLink Info'),\n            $gettext('Delete rLink'),\n          ]\n        }\n      }\n    },\n    actionClick (event) {\n      const click = {\n        selectedIndex: event.feature,\n        action: event.action,\n        lngLat: event.coordinates,\n      }\n      this.$emit('clickFeature', click)\n      this.contextMenu.showed = false\n      this.contextMenu.type = null\n      this.getBounds()\n    },\n\n    contextMenuNode (event) {\n      if (this.isRoadMode) {\n        const features = this.map.querySourceFeatures(this.hoveredStateId.layerId)\n        this.selectedFeature = features.filter(item => this.hoveredStateId.id.includes(item.id))\n\n        if (this.selectedFeature.length > 0) {\n          if (this.hoveredStateId?.layerId === 'rnodes') {\n            const click = {\n              selectedFeature: this.selectedFeature[0],\n              action: 'Edit rNode Info',\n              lngLat: event.mapboxEvent.lngLat,\n            }\n            this.$emit('clickFeature', click)\n          } else if (this.hoveredStateId?.layerId === 'anchorrNodes') {\n            const click = {\n              selectedFeature: this.selectedFeature[0],\n              action: 'Delete Road Anchor',\n              lngLat: null,\n            }\n            this.$emit('clickFeature', click)\n            this.getBounds()\n          }\n        }\n      }\n    },\n\n    moveNode (event) {\n      if (this.isRoadMode) {\n        if (event.mapboxEvent.originalEvent.button === 0 &\n      ['rnodes', 'anchorrNodes'].includes(this.hoveredStateId.layerId)) {\n          event.mapboxEvent.preventDefault() // prevent map control\n          this.map.getCanvas().style.cursor = 'grab'\n          // disable mouseLeave so we stay in hover state.\n          this.keepHovering = true\n          // get selected node\n          const features = this.map.querySourceFeatures(this.hoveredStateId.layerId)\n          this.selectedFeature = features.filter(item => item.id === this.hoveredStateId.id[0])[0]\n          // disable popup\n          this.disablePopup = true\n          if (this.hoveredStateId.layerId === 'rnodes') {\n            this.$store.commit('getConnectedLinks', { selectedNode: this.selectedFeature })\n          }\n          // get position\n          this.map.on('mousemove', this.onMove)\n          this.map.on('mouseup', this.stopMovingNode)\n        }\n      }\n    },\n    onMove (event) {\n      // get position and update node position\n      // only if dragmode is activated (we just leave the node hovering state.)\n      if (this.map.loaded() && this.dragNode && this.selectedFeature) {\n        const click = {\n          selectedFeature: this.selectedFeature,\n          action: null,\n          lngLat: Object.values(event.lngLat),\n        }\n        if (this.hoveredStateId.layerId === 'anchorrNodes') {\n          click.action = 'Move rAnchor'\n          this.$emit('clickFeature', click)\n          // rerender the anchor as they are getter and are not directly modified by the moverAnchor mutation.\n          this.renderedAnchorrNodes.features = this.anchorrNodes.features.filter(node =>\n            booleanContains(this.bbox, node))\n        } else {\n          click.action = 'Move rNode'\n          this.$emit('clickFeature', click)\n        }\n      }\n    },\n    stopMovingNode (event) {\n      if (this.isRoadMode) {\n        // stop tracking position (moving node.)\n        this.map.getCanvas().style.cursor = 'pointer'\n        this.map.off('mousemove', this.onMove)\n        // enable popup and hovering off back. disable Dragmode\n        this.keepHovering = false\n        this.dragNode = false\n        this.disablePopup = false\n        // if we drag too quickly, offcursor it will not be call and the node will stay in hovering mode.\n        // calling offscursor will break the sticky node drawlink behaviour, so we only make its state back to hover-false\n        this.map.getCanvas().style.cursor = ''\n        this.map.setFeatureState(\n          { source: this.hoveredStateId.layerId, id: this.hoveredStateId.id[0] },\n          { hover: false },\n        )\n        this.hoveredStateId = null\n        this.map.off('mouseup', this.stopMovingNode)\n\n      // emit a clickNode with the selected node.\n      // this will work with lag as it is the selectedFeature and not the highlighted one.}\n      }\n    },\n  },\n}\n</script>\n<template>\n  <section>\n    <MglGeojsonLayer\n      source-id=\"rlinks\"\n      :source=\"{\n        type: 'geojson',\n        data: isRoadMode? renderedrLinks : rlinks,\n        buffer: 0,\n        promoteId: 'index',\n      }\"\n      layer-id=\"rlinks\"\n      :layer=\"{\n        interactive: true,\n        type: 'line',\n        minzoom: minZoom.links,\n        paint: {\n          'line-color': ['case', ['has', 'route_color'], ['concat', '#', ['get', 'route_color']], '#B5E0D6'],\n          'line-opacity': ['case', ['boolean', isEditorMode, false], 0.5, 1],\n          'line-width': ['case', ['boolean', ['feature-state', 'hover'], false], 12, 2],\n          'line-blur': ['case', ['boolean', ['feature-state', 'hover'], false], 6, 0]\n\n        },\n\n      }\"\n      v-on=\"isEditorMode ? { } : { mouseenter: onCursor,\n                                   mouseleave: offCursor,\n                                   click: selectClick,\n                                   contextmenu: linkRightClick }\"\n    />\n    <MglImageLayer\n      source-id=\"rlinks\"\n      type=\"symbol\"\n      source=\"rlinks\"\n      layer-id=\"arrow-rlinks\"\n      :layer=\"{\n        type: 'symbol',\n        minzoom: minZoom.rendered,\n        layout: {\n          'symbol-placement': 'line',\n          'symbol-spacing': 200,\n          'icon-ignore-placement': true,\n          'icon-image':'arrow',\n          'icon-size': ['case', ['has', 'oneway'],\n                        ['case',['to-boolean',['to-number',['get','oneway']]],0.3, 0],\n                        0.3],\n          'icon-rotate': 90\n        },\n        paint: {\n          'icon-color': ['case', ['has', 'route_color'], ['concat', '#', ['get', 'route_color']], '#B5E0D6'],\n        }\n      }\"\n    />\n\n    <MglGeojsonLayer\n      source-id=\"rnodes\"\n      :source=\"{\n        type: 'geojson',\n        data: isRoadMode? renderedrNodes:rnodes,\n        buffer: 0,\n        promoteId: 'index',\n      }\"\n      layer-id=\"rnodes\"\n      :layer=\"{\n        interactive: true,\n        type: 'circle',\n        minzoom: minZoom.rendered,\n        paint: {\n          'circle-color': ['case', ['boolean', isEditorMode, false],'#9E9E9E', '#2C3E4E'],\n          'circle-stroke-color': '#ffffff',\n          'circle-stroke-width': 1,\n          'circle-radius': ['case', ['boolean', ['feature-state', 'hover'], false], 14, 3],\n          'circle-blur': ['case', ['boolean', ['feature-state', 'hover'], false], 0.3, 0]\n        },\n      }\"\n      v-on=\"isEditorMode ? { } : { mouseenter: onCursor,\n                                   mouseleave: offCursor,\n                                   mousedown: moveNode,\n                                   contextmenu:contextMenuNode }\"\n    />\n\n    <MglGeojsonLayer\n      source-id=\"anchorrNodes\"\n      :source=\"{\n        type: 'geojson',\n        data: isRoadMode? renderedAnchorrNodes: $store.getters.rnodesHeader,\n        buffer: 0,\n        promoteId: 'index',\n      }\"\n      layer-id=\"anchorrNodes\"\n      :layer=\"{\n        interactive: true,\n        type: 'circle',\n        minzoom: minZoom.rendered,\n        paint: {\n          'circle-color': '#ffffff',\n          'circle-opacity':0.5,\n          'circle-radius': ['case', ['boolean', ['feature-state', 'hover'], false], 10, 5],\n          'circle-blur': ['case', ['boolean', ['feature-state', 'hover'], false], 0.3, 0],\n          'circle-stroke-color': '#2C3E4E',\n          'circle-stroke-width': 2,\n        },\n      }\"\n      @click=\"selectClick\"\n      @mouseover=\"onCursor\"\n      @mouseleave=\"offCursor\"\n      @mousedown=\"moveNode\"\n      @contextmenu=\"contextMenuNode\"\n    />\n    <MglPopup\n      :close-button=\"false\"\n      :showed=\"contextMenu.showed\"\n      :coordinates=\"contextMenu.coordinates\"\n      @close=\"contextMenu.showed=false\"\n    >\n      <span\n        @mouseleave=\"contextMenu.showed=false\"\n      >\n        <v-list\n          dense\n          flat\n        >\n          <v-list-item-group>\n            <v-list-item\n              v-for=\"action in contextMenu.actions\"\n              :key=\"action.id\"\n            >\n              <v-list-item-content>\n                <v-btn\n                  outlined\n                  small\n                  @click=\"actionClick({action: action,\n                                       feature: contextMenu.feature,\n                                       coordinates: contextMenu.coordinates})\"\n                >\n                  {{ $gettext(action) }}\n                </v-btn>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list-item-group>\n        </v-list>\n      </span>\n    </MglPopup>\n  </section>\n</template>\n<style lang=\"scss\" scoped>\n\n</style>\n","import mod from \"-!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RoadLinks.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RoadLinks.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./RoadLinks.vue?vue&type=template&id=1253c1b1&scoped=true&\"\nimport script from \"./RoadLinks.vue?vue&type=script&lang=js&\"\nexport * from \"./RoadLinks.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1253c1b1\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","_g","attrs","source","type","data","isRoadMode","renderedrLinks","rlinks","buffer","promoteId","layer","interactive","minzoom","minZoom","links","paint","isEditorMode","mouseenter","onCursor","mouseleave","offCursor","click","selectClick","contextmenu","linkRightClick","_v","rendered","layout","renderedrNodes","rnodes","mousedown","moveNode","contextMenuNode","renderedAnchorrNodes","$store","getters","rnodesHeader","on","mouseover","showed","contextMenu","coordinates","close","$event","dense","flat","_l","actions","action","key","id","outlined","small","actionClick","feature","_s","$gettext","_withStripped","name","components","MglGeojsonLayer","MglImageLayer","MglPopup","props","events","hoveredStateId","visibleNodes","visibleLinks","disablePopup","editorRnodes","bbox","computed","selectedPopupContent","roadsPopupContent","selectedrGroup","visiblerNodes","visiblerLinks","anchorrNodes","anchorMode","watch","getBounds","val","map","off","created","structuredClone","rlinksHeader","beforeDestroy","removeLayer","methods","bounds","_sw","lng","lat","_ne","getZoom","features","filter","node","nodeSet","Set","properties","index","link","has","a","b","event","popup","isOpen","remove","layerId","length","selectedFeature","mapboxEvent","closeButton","setLngLat","lngLat","setHTML","addTo","getCanvas","style","cursor","setFeatureState","hover","uniqueArray","item","$emit","selectedId","includes","keepHovering","dragNode","selectedIndex","querySourceFeatures","originalEvent","button","preventDefault","commit","selectedNode","onMove","stopMovingNode","loaded","Object","values"],"sourceRoot":""}