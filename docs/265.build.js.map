{"version":3,"file":"265.build.js","mappings":"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","sources":["webpack://quetzal-network-editor/./src/components/StaticLinks.vue?49db","webpack://quetzal-network-editor/src/components/StaticLinks.vue","webpack://quetzal-network-editor/./src/components/StaticLinks.vue?2fc3","webpack://quetzal-network-editor/./src/components/StaticLinks.vue"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"section\",\n    [\n      _c(\n        \"MglGeojsonLayer\",\n        _vm._g(\n          {\n            attrs: {\n              \"source-id\": \"links\",\n              source: {\n                type: \"geojson\",\n                data: _vm.visibleLinks,\n                buffer: 0,\n                promoteId: \"index\",\n              },\n              \"layer-id\": \"links\",\n              layer: {\n                interactive: true,\n                type: \"line\",\n                minzoom: 1,\n                maxzoom: 18,\n                paint: {\n                  \"line-color\": [\n                    \"case\",\n                    [\"has\", \"route_color\"],\n                    [\"concat\", \"#\", [\"get\", \"route_color\"]],\n                    \"#B5E0D6\",\n                  ],\n                  \"line-opacity\": [\n                    \"case\",\n                    [\"boolean\", _vm.isEditorMode, false],\n                    0.1,\n                    1,\n                  ],\n                  \"line-width\": [\n                    \"case\",\n                    [\"has\", \"route_width\"],\n                    [\n                      \"case\",\n                      [\"to-boolean\", [\"to-number\", [\"get\", \"route_width\"]]],\n                      [\"to-number\", [\"get\", \"route_width\"]],\n                      3,\n                    ],\n                    3,\n                  ],\n                },\n\n                layout: {\n                  \"line-sort-key\": [\"to-number\", [\"get\", \"route_width\"]],\n                  \"line-cap\": \"round\",\n                },\n              },\n            },\n          },\n          _vm.isEditorMode\n            ? {}\n            : {\n                mouseenter: _vm.enterLink,\n                mouseleave: _vm.leaveLink,\n                contextmenu: _vm.editLineProperties,\n              }\n        )\n      ),\n      _vm._v(\" \"),\n      _c(\"MglGeojsonLayer\", {\n        attrs: {\n          \"source-id\": \"nodes\",\n          source: {\n            type: \"geojson\",\n            data: _vm.visibleNodes,\n            buffer: 0,\n            promoteId: \"index\",\n          },\n          \"layer-id\": \"nodes\",\n          layer: {\n            interactive: true,\n            type: \"circle\",\n            minzoom: 12,\n            maxzoom: 18,\n            paint: {\n              \"circle-color\": [\n                \"case\",\n                [\"boolean\", _vm.isEditorMode, false],\n                \"#9E9E9E\",\n                \"#2C3E4E\",\n              ],\n              \"circle-stroke-color\": \"#ffffff\",\n              \"circle-stroke-width\": 1,\n              \"circle-radius\": [\n                \"case\",\n                [\"has\", \"route_width\"],\n                [\n                  \"case\",\n                  [\"to-boolean\", [\"to-number\", [\"get\", \"route_width\"]]],\n                  [\"to-number\", [\"get\", \"route_width\"]],\n                  3,\n                ],\n                3,\n              ],\n            },\n          },\n        },\n      }),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<!-- eslint-disable no-return-assign -->\n<script>\nimport { MglGeojsonLayer } from 'vue-mapbox'\nimport mapboxgl from 'mapbox-gl'\nexport default {\n  name: 'StaticLinks',\n  components: {\n    MglGeojsonLayer,\n  },\n  props: ['map', 'showedTrips', 'isEditorMode'],\n  events: ['rightClick'],\n\n  data () {\n    return {\n      visibleNodes: {},\n      visibleLinks: {},\n      selectedFeatures: [],\n\n    }\n  },\n  computed: {\n    selectedPopupContent () { return this.$store.getters.linksPopupContent },\n    links () { return this.$store.getters.links },\n    nodes () { return this.$store.getters.nodes },\n  },\n\n  watch: {\n    showedTrips (newVal, oldVal) {\n      let changes = ''\n      if (newVal.length < oldVal.length) {\n        // if a tripis unchecked. we remove it\n        changes = new Set(oldVal.filter(item => !newVal.includes(item)))\n        this.setHiddenFeatures('remove', changes)\n      } else if (newVal.length > oldVal.length) {\n        // if a trip is added, we add it!\n        changes = new Set(newVal.filter(item => !oldVal.includes(item)))\n        this.setHiddenFeatures('add', changes)\n      } else {\n        this.setHiddenFeatures()\n      }\n    },\n    isEditorMode (val) {\n      val ? this.map.off('dblclick', this.selectLine) : this.map.on('dblclick', this.selectLine)\n    },\n  },\n  created () {\n    this.setHiddenFeatures()\n    this.map.on('dblclick', this.selectLine)\n  },\n\n  methods: {\n\n    enterLink (event) {\n      event.map.getCanvas().style.cursor = 'pointer'\n      this.selectedFeatures = event.mapboxEvent.features\n      if (this.popup?.isOpen()) this.popup.remove() // make sure there is no popup before creating one.\n      if (this.selectedPopupContent.length > 0) { // do not show popup if nothing is selected (selectedPopupContent)\n        this.popup = new mapboxgl.Popup({ closeButton: false })\n          .setLngLat([event.mapboxEvent.lngLat.lng, event.mapboxEvent.lngLat.lat])\n          .setHTML(this.selectedFeatures[0].properties[this.selectedPopupContent])\n          .addTo(event.map)\n      }\n    },\n    leaveLink (event) {\n      this.selectedFeatures = []\n      if (this.popup?.isOpen()) this.popup.remove()\n      event.map.getCanvas().style.cursor = ''\n    },\n    setHiddenFeatures (method = 'all', trips = []) {\n      // get visible links and nodes.\n      if (method === 'all') {\n        this.visibleLinks = structuredClone(this.$store.getters.linksHeader)\n        this.visibleNodes = structuredClone(this.$store.getters.nodesHeader)\n        const showedTripsSet = new Set(this.showedTrips)\n        this.visibleLinks.features = this.links.features.filter(\n          link => showedTripsSet.has(link.properties.trip_id))\n        // get all unique width\n        const widthArr = [...new Set(this.visibleLinks.features.map(item => Number(item.properties.route_width)))]\n        // create a dict {width:[node_index]}\n        const widthDict = {}\n        widthArr.forEach(key => widthDict[key] = new Set())\n        this.visibleLinks.features.map(item =>\n          [item.properties.a, item.properties.b].forEach(\n            node => widthDict[Number(item.properties.route_width)].add(node)))\n        // remove duplicated nodes. only keep larger one (if node_1 is in a line of size 5 and 3, only keep the 5 one.)\n        let totSet = new Set()\n        for (let i = 0; i < widthArr.length - 1; i++) {\n          const a = widthDict[widthArr[i + 1]]\n          const b = widthDict[widthArr[i]]\n          totSet = new Set([...totSet, ...b])\n          widthDict[widthArr[i + 1]] = new Set([...a].filter(x => !totSet.has(x)))\n        }\n        // for each width, get the nodes and add the width to the properties for rendering.\n        widthArr.forEach(key => {\n          const newNodes = this.nodes.features.filter(node => widthDict[key].has(node.properties.index))\n          newNodes.map(node => node.properties.route_width = key)\n          this.visibleNodes.features.push(...newNodes)\n        })\n      } else if (method === 'remove') {\n        this.visibleLinks.features = this.visibleLinks.features.filter(link => !trips.has(link.properties.trip_id))\n        const a = this.visibleLinks.features.map(item => item.properties.a)\n        const b = this.visibleLinks.features.map(item => item.properties.b)\n        const ab = new Set([...a, ...b])\n        this.visibleNodes.features = this.visibleNodes.features.filter(node => ab.has(node.properties.index))\n      } else if (method === 'add') {\n        const newFeatures = this.links.features.filter(link => trips.has(link.properties.trip_id))\n        this.visibleLinks.features.push(...newFeatures)\n        // get all unique value of width\n        const widthArr = [...new Set(newFeatures.map(item => Number(item.properties.route_width)))]\n        widthArr.sort(function (a, b) { return b - a }) // sort it\n        // create a dict {width:[node_index]}\n        const widthDict = {}\n        widthArr.forEach(key => widthDict[key] = new Set())\n        newFeatures.map(item =>\n          [item.properties.a, item.properties.b].forEach(\n            node => widthDict[Number(item.properties.route_width)].add(node)))\n        // remove duplicated nodes. only keep larger one (if node_1 is in a line of size 5 and 3, only keep the 5 one.)\n        let totSet = new Set()\n        for (let i = 0; i < widthArr.length - 1; i++) {\n          const a = widthDict[widthArr[i + 1]]\n          const b = widthDict[widthArr[i]]\n          totSet = new Set([...totSet, ...b])\n          widthDict[widthArr[i + 1]] = new Set([...a].filter(x => !totSet.has(x)))\n        }\n\n        // for each width, get the nodes and add the width to the properties for rendering.\n        widthArr.forEach(key => {\n          const newNodes = this.nodes.features.filter(node => widthDict[key].has(node.properties.index))\n          newNodes.map(node => node.properties.route_width = key)\n          this.visibleNodes.features.push(...newNodes)\n        })\n      }\n      // const endTime = performance.now()\n    },\n    selectLine (e) {\n      e.preventDefault() // prevent map control\n      // if we are not hovering. select closest link (within 5 pixels)\n      if (this.selectedFeatures.length === 0) {\n        // Set `bbox` as 5px reactangle area around clicked point.\n        const bbox = [\n          [e.point.x - 5, e.point.y - 5],\n          [e.point.x + 5, e.point.y + 5],\n        ]\n        // Find features intersecting the bounding box.\n        this.selectedFeatures = this.map.queryRenderedFeatures(bbox, {\n          layers: ['links'],\n        })\n      }\n      // do nothing if nothing is clicked (clicking on map, not on a link)\n      if (this.selectedFeatures.length > 0) {\n        // set. the first one as editor mode\n        // eslint-disable-next-line max-len\n        this.$store.commit('setEditorTrip', { tripId: this.selectedFeatures[0].properties.trip_id, changeBounds: false })\n        this.$store.commit('changeNotification', { text: '', autoClose: true })\n      }\n    },\n    editLineProperties (event) {\n      // eslint-disable-next-line max-len\n      this.$store.commit('setEditorTrip', { tripId: event.mapboxEvent.features[0].properties.trip_id, changeBounds: false })\n      this.$emit('rightClick', { action: 'Edit Line Info', lingering: false })\n    },\n\n  },\n}\n</script>\n<template>\n  <section>\n    <MglGeojsonLayer\n      source-id=\"links\"\n      :source=\"{\n        type: 'geojson',\n        data: visibleLinks,\n        buffer: 0,\n        promoteId: 'index',\n      }\"\n      layer-id=\"links\"\n      :layer=\"{\n        interactive: true,\n        type: 'line',\n        minzoom: 1,\n        maxzoom: 18,\n        paint: {\n          'line-color': ['case', ['has', 'route_color'], ['concat', '#', ['get', 'route_color']], '#B5E0D6'],\n          'line-opacity': ['case', ['boolean', isEditorMode, false], 0.1, 1],\n          'line-width': ['case', ['has', 'route_width'],\n                         ['case', ['to-boolean', ['to-number', ['get', 'route_width']]],\n                          ['to-number', ['get', 'route_width']],\n                          3], 3],\n        },\n\n        layout: {\n          'line-sort-key': ['to-number',['get', 'route_width']],\n          'line-cap': 'round',\n        }\n      }\"\n      v-on=\"isEditorMode ? { } : { mouseenter: enterLink, mouseleave: leaveLink, contextmenu:editLineProperties }\"\n    />\n\n    <MglGeojsonLayer\n      source-id=\"nodes\"\n      :source=\"{\n        type: 'geojson',\n        data: visibleNodes,\n        buffer: 0,\n        promoteId: 'index',\n      }\"\n      layer-id=\"nodes\"\n      :layer=\"{\n        interactive: true,\n        type: 'circle',\n        minzoom: 12,\n        maxzoom: 18,\n        paint: {\n          'circle-color': ['case', ['boolean', isEditorMode, false],'#9E9E9E', '#2C3E4E'],\n          'circle-stroke-color': '#ffffff',\n          'circle-stroke-width': 1,\n          'circle-radius': ['case', ['has', 'route_width'],\n                            ['case', ['to-boolean', ['to-number', ['get', 'route_width']]],\n                             ['to-number', ['get', 'route_width']],\n                             3], 3],\n        },\n      }\"\n    />\n  </section>\n</template>\n<style lang=\"scss\" scoped>\n\n</style>\n","import mod from \"-!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StaticLinks.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./StaticLinks.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./StaticLinks.vue?vue&type=template&id=74160ab4&scoped=true&\"\nimport script from \"./StaticLinks.vue?vue&type=script&lang=js&\"\nexport * from \"./StaticLinks.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"74160ab4\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","_g","attrs","source","type","data","visibleLinks","buffer","promoteId","layer","interactive","minzoom","maxzoom","paint","isEditorMode","layout","mouseenter","enterLink","mouseleave","leaveLink","contextmenu","editLineProperties","_v","visibleNodes","_withStripped","name","components","MglGeojsonLayer","props","events","selectedFeatures","computed","selectedPopupContent","$store","getters","linksPopupContent","links","nodes","watch","showedTrips","newVal","oldVal","changes","length","Set","filter","item","includes","setHiddenFeatures","val","map","off","selectLine","on","created","methods","event","getCanvas","style","cursor","mapboxEvent","features","popup","isOpen","remove","closeButton","setLngLat","lngLat","lng","lat","setHTML","properties","addTo","method","trips","structuredClone","linksHeader","nodesHeader","showedTripsSet","link","has","trip_id","widthArr","Number","route_width","widthDict","forEach","key","a","b","node","add","totSet","i","x","newNodes","index","push","ab","newFeatures","sort","e","preventDefault","bbox","point","y","queryRenderedFeatures","layers","commit","tripId","changeBounds","text","autoClose","$emit","action","lingering"],"sourceRoot":""}